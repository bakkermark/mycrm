{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const os=require(\"os\");const fs=require(\"fs\");const{pathToFileURL}=require(\"url\");const path=require(\"path\");const{optimize:optimizeAgnostic}=require(\"./svgo.js\");const importConfig=__name(async configFile=>{let config;if(configFile.endsWith(\".cjs\")){config=require(configFile)}else{const{default:imported}=await import(pathToFileURL(configFile)).then((mod)=>{const exports = Object.keys(mod);if(exports.length===1&&exports[0]==='default'&&mod.default&&mod.default.__esModule){return mod.default}return mod});config=imported}if(config==null||typeof config!==\"object\"||Array.isArray(config)){throw Error(`Invalid config file \"${configFile}\"`)}return config},\"importConfig\");const isFile=__name(async file=>{try{const stats=await fs.promises.stat(file);return stats.isFile()}catch{return false}},\"isFile\");const loadConfig=__name(async(configFile,cwd=process.cwd())=>{if(configFile!=null){if(path.isAbsolute(configFile)){return await importConfig(configFile)}else{return await importConfig(path.join(cwd,configFile))}}let dir=cwd;while(true){const js=path.join(dir,\"svgo.config.js\");if(await isFile(js)){return await importConfig(js)}const mjs=path.join(dir,\"svgo.config.mjs\");if(await isFile(mjs)){return await importConfig(mjs)}const cjs=path.join(dir,\"svgo.config.cjs\");if(await isFile(cjs)){return await importConfig(cjs)}const parent=path.dirname(dir);if(dir===parent){return null}dir=parent}},\"loadConfig\");exports.loadConfig=loadConfig;const optimize=__name((input,config)=>{if(config==null){config={}}if(typeof config!==\"object\"){throw Error(\"Config should be an object\")}return optimizeAgnostic(input,{...config,js2svg:{eol:os.EOL===\"\\r\\n\"?\"crlf\":\"lf\",...config.js2svg}})},\"optimize\");exports.optimize=optimize;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,MAAM,GAAK,QAAQ,IAAI,EACvB,MAAM,GAAK,QAAQ,IAAI,EACvB,KAAM,CAAE,aAAc,EAAI,QAAQ,KAAK,EACvC,MAAM,KAAO,QAAQ,MAAM,EAC3B,KAAM,CAAE,SAAU,gBAAiB,EAAI,QAAQ,WAAW,EAE1D,MAAM,aAAe,aAAO,YAAe,CACzC,IAAI,OAIJ,GAAI,WAAW,SAAS,MAAM,EAAG,CAC/B,OAAS,QAAQ,UAAU,CAC7B,KAAO,CAGL,KAAM,CAAE,QAAS,QAAS,EAAI,MAAM,OAAO,cAAc,UAAU,qKACnE,OAAS,QACX,CACA,GAAI,QAAU,MAAQ,OAAO,SAAW,UAAY,MAAM,QAAQ,MAAM,EAAG,CACzE,MAAM,MAAM,wBAAwB,UAAU,GAAG,CACnD,CACA,OAAO,MACT,EAjBqB,gBAmBrB,MAAM,OAAS,aAAO,MAAS,CAC7B,GAAI,CACF,MAAM,MAAQ,MAAM,GAAG,SAAS,KAAK,IAAI,EACzC,OAAO,MAAM,OAAO,CACtB,MAAQ,CACN,MAAO,MACT,CACF,EAPe,UASf,MAAM,WAAa,aAAO,WAAY,IAAM,QAAQ,IAAI,IAAM,CAC5D,GAAI,YAAc,KAAM,CACtB,GAAI,KAAK,WAAW,UAAU,EAAG,CAC/B,OAAO,MAAM,aAAa,UAAU,CACtC,KAAO,CACL,OAAO,MAAM,aAAa,KAAK,KAAK,IAAK,UAAU,CAAC,CACtD,CACF,CACA,IAAI,IAAM,IAEV,MAAO,KAAM,CACX,MAAM,GAAK,KAAK,KAAK,IAAK,gBAAgB,EAC1C,GAAI,MAAM,OAAO,EAAE,EAAG,CACpB,OAAO,MAAM,aAAa,EAAE,CAC9B,CACA,MAAM,IAAM,KAAK,KAAK,IAAK,iBAAiB,EAC5C,GAAI,MAAM,OAAO,GAAG,EAAG,CACrB,OAAO,MAAM,aAAa,GAAG,CAC/B,CACA,MAAM,IAAM,KAAK,KAAK,IAAK,iBAAiB,EAC5C,GAAI,MAAM,OAAO,GAAG,EAAG,CACrB,OAAO,MAAM,aAAa,GAAG,CAC/B,CACA,MAAM,OAAS,KAAK,QAAQ,GAAG,EAC/B,GAAI,MAAQ,OAAQ,CAClB,OAAO,IACT,CACA,IAAM,MACR,CACF,EA7BmB,cA8BnB,QAAQ,WAAa,WAErB,MAAM,SAAW,QAAC,MAAO,SAAW,CAClC,GAAI,QAAU,KAAM,CAClB,OAAS,CAAC,CACZ,CACA,GAAI,OAAO,SAAW,SAAU,CAC9B,MAAM,MAAM,4BAA4B,CAC1C,CACA,OAAO,iBAAiB,MAAO,CAC7B,GAAG,OACH,OAAQ,CAEN,IAAK,GAAG,MAAQ,OAAS,OAAS,KAClC,GAAG,OAAO,MACZ,CACF,CAAC,CACH,EAfiB,YAgBjB,QAAQ,SAAW","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/lib/svgo-node.js"],"sourcesContent":["'use strict';\n\nconst os = require('os');\nconst fs = require('fs');\nconst { pathToFileURL } = require('url');\nconst path = require('path');\nconst { optimize: optimizeAgnostic } = require('./svgo.js');\n\nconst importConfig = async (configFile) => {\n  let config;\n  // at the moment dynamic import may randomly fail with segfault\n  // to workaround this for some users .cjs extension is loaded\n  // exclusively with require\n  if (configFile.endsWith('.cjs')) {\n    config = require(configFile);\n  } else {\n    // dynamic import expects file url instead of path and may fail\n    // when windows path is provided\n    const { default: imported } = await import(pathToFileURL(configFile));\n    config = imported;\n  }\n  if (config == null || typeof config !== 'object' || Array.isArray(config)) {\n    throw Error(`Invalid config file \"${configFile}\"`);\n  }\n  return config;\n};\n\nconst isFile = async (file) => {\n  try {\n    const stats = await fs.promises.stat(file);\n    return stats.isFile();\n  } catch {\n    return false;\n  }\n};\n\nconst loadConfig = async (configFile, cwd = process.cwd()) => {\n  if (configFile != null) {\n    if (path.isAbsolute(configFile)) {\n      return await importConfig(configFile);\n    } else {\n      return await importConfig(path.join(cwd, configFile));\n    }\n  }\n  let dir = cwd;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const js = path.join(dir, 'svgo.config.js');\n    if (await isFile(js)) {\n      return await importConfig(js);\n    }\n    const mjs = path.join(dir, 'svgo.config.mjs');\n    if (await isFile(mjs)) {\n      return await importConfig(mjs);\n    }\n    const cjs = path.join(dir, 'svgo.config.cjs');\n    if (await isFile(cjs)) {\n      return await importConfig(cjs);\n    }\n    const parent = path.dirname(dir);\n    if (dir === parent) {\n      return null;\n    }\n    dir = parent;\n  }\n};\nexports.loadConfig = loadConfig;\n\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  return optimizeAgnostic(input, {\n    ...config,\n    js2svg: {\n      // platform specific default for end of line\n      eol: os.EOL === '\\r\\n' ? 'crlf' : 'lf',\n      ...config.js2svg,\n    },\n  });\n};\nexports.optimize = optimize;\n"]}}