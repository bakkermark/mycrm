{"code":"(()=>{\n\"use strict\";const{detachNodeFromParent}=require(\"../lib/xast.js\");exports.name=\"removeElementsByAttr\";exports.description=\"removes arbitrary elements by ID or className (disabled by default)\";exports.fn=(root,params)=>{const ids=params.id==null?[]:Array.isArray(params.id)?params.id:[params.id];const classes=params.class==null?[]:Array.isArray(params.class)?params.class:[params.class];return{element:{enter:(node,parentNode)=>{if(node.attributes.id!=null&&ids.length!==0){if(ids.includes(node.attributes.id)){detachNodeFromParent(node,parentNode)}}if(node.attributes.class&&classes.length!==0){const classList=node.attributes.class.split(\" \");for(const item of classes){if(classList.includes(item)){detachNodeFromParent(node,parentNode);break}}}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,KAAM,CAAE,oBAAqB,EAAI,QAAQ,gBAAgB,EAEzD,QAAQ,KAAO,uBACf,QAAQ,YACN,sEAmCF,QAAQ,GAAK,CAAC,KAAM,SAAW,CAC7B,MAAM,IACJ,OAAO,IAAM,KAAO,CAAC,EAAI,MAAM,QAAQ,OAAO,EAAE,EAAI,OAAO,GAAK,CAAC,OAAO,EAAE,EAC5E,MAAM,QACJ,OAAO,OAAS,KACZ,CAAC,EACD,MAAM,QAAQ,OAAO,KAAK,EAC1B,OAAO,MACP,CAAC,OAAO,KAAK,EACnB,MAAO,CACL,QAAS,CACP,MAAO,CAAC,KAAM,aAAe,CAE3B,GAAI,KAAK,WAAW,IAAM,MAAQ,IAAI,SAAW,EAAG,CAClD,GAAI,IAAI,SAAS,KAAK,WAAW,EAAE,EAAG,CACpC,qBAAqB,KAAM,UAAU,CACvC,CACF,CAEA,GAAI,KAAK,WAAW,OAAS,QAAQ,SAAW,EAAG,CACjD,MAAM,UAAY,KAAK,WAAW,MAAM,MAAM,GAAG,EACjD,UAAW,QAAQ,QAAS,CAC1B,GAAI,UAAU,SAAS,IAAI,EAAG,CAC5B,qBAAqB,KAAM,UAAU,EACrC,KACF,CACF,CACF,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/removeElementsByAttr.js"],"sourcesContent":["'use strict';\n\nconst { detachNodeFromParent } = require('../lib/xast.js');\n\nexports.name = 'removeElementsByAttr';\nexports.description =\n  'removes arbitrary elements by ID or className (disabled by default)';\n\n/**\n * Remove arbitrary SVG elements by ID or className.\n *\n * @example id\n *     > single: remove element with ID of `elementID`\n *     ---\n *     removeElementsByAttr:\n *       id: 'elementID'\n *\n *     > list: remove multiple elements by ID\n *     ---\n *     removeElementsByAttr:\n *       id:\n *         - 'elementID'\n *         - 'anotherID'\n *\n * @example class\n *     > single: remove all elements with class of `elementClass`\n *     ---\n *     removeElementsByAttr:\n *       class: 'elementClass'\n *\n *     > list: remove all elements with class of `elementClass` or `anotherClass`\n *     ---\n *     removeElementsByAttr:\n *       class:\n *         - 'elementClass'\n *         - 'anotherClass'\n *\n * @author Eli Dupuis (@elidupuis)\n *\n * @type {import('./plugins-types').Plugin<'removeElementsByAttr'>}\n */\nexports.fn = (root, params) => {\n  const ids =\n    params.id == null ? [] : Array.isArray(params.id) ? params.id : [params.id];\n  const classes =\n    params.class == null\n      ? []\n      : Array.isArray(params.class)\n      ? params.class\n      : [params.class];\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // remove element if it's `id` matches configured `id` params\n        if (node.attributes.id != null && ids.length !== 0) {\n          if (ids.includes(node.attributes.id)) {\n            detachNodeFromParent(node, parentNode);\n          }\n        }\n        // remove element if it's `class` contains any of the configured `class` params\n        if (node.attributes.class && classes.length !== 0) {\n          const classList = node.attributes.class.split(' ');\n          for (const item of classes) {\n            if (classList.includes(item)) {\n              detachNodeFromParent(node, parentNode);\n              break;\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"]}}