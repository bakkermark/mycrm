{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{promisify}=require(\"util\");const fs=require(\"fs\");const optsArg=__name(opts=>{if(!opts)opts={mode:511,fs};else if(typeof opts===\"object\")opts={mode:511,fs,...opts};else if(typeof opts===\"number\")opts={mode:opts,fs};else if(typeof opts===\"string\")opts={mode:parseInt(opts,8),fs};else throw new TypeError(\"invalid options argument\");opts.mkdir=opts.mkdir||opts.fs.mkdir||fs.mkdir;opts.mkdirAsync=promisify(opts.mkdir);opts.stat=opts.stat||opts.fs.stat||fs.stat;opts.statAsync=promisify(opts.stat);opts.statSync=opts.statSync||opts.fs.statSync||fs.statSync;opts.mkdirSync=opts.mkdirSync||opts.fs.mkdirSync||fs.mkdirSync;return opts},\"optsArg\");module.exports=optsArg;\n})()\n","warnings":[],"map":{"version":3,"mappings":";kHAAA,KAAM,CAAE,SAAU,EAAI,QAAQ,MAAM,EACpC,MAAM,GAAK,QAAQ,IAAI,EACvB,MAAM,QAAU,aAAQ,CACtB,GAAI,CAAC,KACH,KAAO,CAAE,KAAM,IAAO,EAAG,UAClB,OAAO,OAAS,SACvB,KAAO,CAAE,KAAM,IAAO,GAAI,GAAG,IAAK,UAC3B,OAAO,OAAS,SACvB,KAAO,CAAE,KAAM,KAAM,EAAG,UACjB,OAAO,OAAS,SACvB,KAAO,CAAE,KAAM,SAAS,KAAM,CAAC,EAAG,EAAG,MAErC,OAAM,IAAI,UAAU,0BAA0B,EAEhD,KAAK,MAAQ,KAAK,OAAS,KAAK,GAAG,OAAS,GAAG,MAC/C,KAAK,WAAa,UAAU,KAAK,KAAK,EACtC,KAAK,KAAO,KAAK,MAAQ,KAAK,GAAG,MAAQ,GAAG,KAC5C,KAAK,UAAY,UAAU,KAAK,IAAI,EACpC,KAAK,SAAW,KAAK,UAAY,KAAK,GAAG,UAAY,GAAG,SACxD,KAAK,UAAY,KAAK,WAAa,KAAK,GAAG,WAAa,GAAG,UAC3D,OAAO,IACT,EAnBgB,WAoBhB,OAAO,QAAU","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/opts-arg.js"],"sourcesContent":["const { promisify } = require('util')\nconst fs = require('fs')\nconst optsArg = opts => {\n  if (!opts)\n    opts = { mode: 0o777, fs }\n  else if (typeof opts === 'object')\n    opts = { mode: 0o777, fs, ...opts }\n  else if (typeof opts === 'number')\n    opts = { mode: opts, fs }\n  else if (typeof opts === 'string')\n    opts = { mode: parseInt(opts, 8), fs }\n  else\n    throw new TypeError('invalid options argument')\n\n  opts.mkdir = opts.mkdir || opts.fs.mkdir || fs.mkdir\n  opts.mkdirAsync = promisify(opts.mkdir)\n  opts.stat = opts.stat || opts.fs.stat || fs.stat\n  opts.statAsync = promisify(opts.stat)\n  opts.statSync = opts.statSync || opts.fs.statSync || fs.statSync\n  opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs.mkdirSync\n  return opts\n}\nmodule.exports = optsArg\n"]}}