{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{visit}=require(\"../xast.js\");const invokePlugins=__name((ast,info,plugins,overrides,globalOverrides)=>{for(const plugin of plugins){const override=overrides?.[plugin.name];if(override===false){continue}const params={...plugin.params,...globalOverrides,...override};const visitor=plugin.fn(ast,params,info);if(visitor!=null){visit(ast,visitor)}}},\"invokePlugins\");exports.invokePlugins=invokePlugins;const createPreset=__name(({name,plugins})=>{return{name,fn:(ast,params,info)=>{const{floatPrecision,overrides}=params;const globalOverrides={};if(floatPrecision!=null){globalOverrides.floatPrecision=floatPrecision}if(overrides){const pluginNames=plugins.map(({name:name2})=>name2);for(const pluginName of Object.keys(overrides)){if(!pluginNames.includes(pluginName)){console.warn(`You are trying to configure ${pluginName} which is not part of ${name}.\nTry to put it before or after, for example\n\nplugins: [\n  {\n    name: '${name}',\n  },\n  '${pluginName}'\n]\n`)}}}invokePlugins(ast,info,plugins,overrides,globalOverrides)}}},\"createPreset\");exports.createPreset=createPreset;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,KAAM,EAAI,QAAQ,YAAY,EAYtC,MAAM,cAAgB,QAAC,IAAK,KAAM,QAAS,UAAW,kBAAoB,CACxE,UAAW,UAAU,QAAS,CAC5B,MAAM,SAAW,YAAY,OAAO,IAAI,EACxC,GAAI,WAAa,MAAO,CACtB,QACF,CACA,MAAM,OAAS,CAAE,GAAG,OAAO,OAAQ,GAAG,gBAAiB,GAAG,QAAS,EAEnE,MAAM,QAAU,OAAO,GAAG,IAAK,OAAQ,IAAI,EAC3C,GAAI,SAAW,KAAM,CACnB,MAAM,IAAK,OAAO,CACpB,CACF,CACF,EAbsB,iBActB,QAAQ,cAAgB,cAExB,MAAM,aAAe,QAAC,CAAE,KAAM,OAAQ,IAAM,CAC1C,MAAO,CACL,KACA,GAAI,CAAC,IAAK,OAAQ,OAAS,CACzB,KAAM,CAAE,eAAgB,SAAU,EAAI,OACtC,MAAM,gBAAkB,CAAC,EACzB,GAAI,gBAAkB,KAAM,CAC1B,gBAAgB,eAAiB,cACnC,CACA,GAAI,UAAW,CACb,MAAM,YAAc,QAAQ,IAAI,CAAC,CAAE,KAAAA,KAAK,IAAMA,KAAI,EAClD,UAAW,cAAc,OAAO,KAAK,SAAS,EAAG,CAC/C,GAAI,CAAC,YAAY,SAAS,UAAU,EAAG,CACrC,QAAQ,KACN,+BAA+B,UAAU,yBAAyB,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA,aAItD,IAAI;AAAA;AAAA,KAEZ,UAAU;AAAA;AAAA,CAEpB,CACF,CACF,CACF,CACA,cAAc,IAAK,KAAM,QAAS,UAAW,eAAe,CAC9D,CACF,CACF,EA7BqB,gBA8BrB,QAAQ,aAAe","names":["name"],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/lib/svgo/plugins.js"],"sourcesContent":["'use strict';\n\nconst { visit } = require('../xast.js');\n\n/**\n * Plugins engine.\n *\n * @module plugins\n *\n * @param {Object} ast input ast\n * @param {Object} info extra information\n * @param {Array} plugins plugins object from config\n * @return {Object} output ast\n */\nconst invokePlugins = (ast, info, plugins, overrides, globalOverrides) => {\n  for (const plugin of plugins) {\n    const override = overrides?.[plugin.name];\n    if (override === false) {\n      continue;\n    }\n    const params = { ...plugin.params, ...globalOverrides, ...override };\n\n    const visitor = plugin.fn(ast, params, info);\n    if (visitor != null) {\n      visit(ast, visitor);\n    }\n  }\n};\nexports.invokePlugins = invokePlugins;\n\nconst createPreset = ({ name, plugins }) => {\n  return {\n    name,\n    fn: (ast, params, info) => {\n      const { floatPrecision, overrides } = params;\n      const globalOverrides = {};\n      if (floatPrecision != null) {\n        globalOverrides.floatPrecision = floatPrecision;\n      }\n      if (overrides) {\n        const pluginNames = plugins.map(({ name }) => name);\n        for (const pluginName of Object.keys(overrides)) {\n          if (!pluginNames.includes(pluginName)) {\n            console.warn(\n              `You are trying to configure ${pluginName} which is not part of ${name}.\\n` +\n                `Try to put it before or after, for example\\n\\n` +\n                `plugins: [\\n` +\n                `  {\\n` +\n                `    name: '${name}',\\n` +\n                `  },\\n` +\n                `  '${pluginName}'\\n` +\n                `]\\n`\n            );\n          }\n        }\n      }\n      invokePlugins(ast, info, plugins, overrides, globalOverrides);\n    },\n  };\n};\nexports.createPreset = createPreset;\n"]}}