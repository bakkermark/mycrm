{"code":"(()=>{\n\"use strict\";exports.name=\"removeViewBox\";exports.description=\"removes viewBox attribute when possible\";const viewBoxElems=[\"svg\",\"pattern\",\"symbol\"];exports.fn=()=>{return{element:{enter:(node,parentNode)=>{if(viewBoxElems.includes(node.name)&&node.attributes.viewBox!=null&&node.attributes.width!=null&&node.attributes.height!=null){if(node.name===\"svg\"&&parentNode.type!==\"root\"){return}const nums=node.attributes.viewBox.split(/[ ,]+/g);if(nums[0]===\"0\"&&nums[1]===\"0\"&&node.attributes.width.replace(/px$/,\"\")===nums[2]&&node.attributes.height.replace(/px$/,\"\")===nums[3]){delete node.attributes.viewBox}}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,QAAQ,KAAO,gBACf,QAAQ,YAAc,0CAEtB,MAAM,aAAe,CAAC,MAAO,UAAW,QAAQ,EAgBhD,QAAQ,GAAK,IAAM,CACjB,MAAO,CACL,QAAS,CACP,MAAO,CAAC,KAAM,aAAe,CAC3B,GACE,aAAa,SAAS,KAAK,IAAI,GAC/B,KAAK,WAAW,SAAW,MAC3B,KAAK,WAAW,OAAS,MACzB,KAAK,WAAW,QAAU,KAC1B,CAEA,GAAI,KAAK,OAAS,OAAS,WAAW,OAAS,OAAQ,CACrD,MACF,CACA,MAAM,KAAO,KAAK,WAAW,QAAQ,MAAM,QAAQ,EACnD,GACE,KAAK,CAAC,IAAM,KACZ,KAAK,CAAC,IAAM,KACZ,KAAK,WAAW,MAAM,QAAQ,MAAO,EAAE,IAAM,KAAK,CAAC,GACnD,KAAK,WAAW,OAAO,QAAQ,MAAO,EAAE,IAAM,KAAK,CAAC,EACpD,CACA,OAAO,KAAK,WAAW,OACzB,CACF,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/removeViewBox.js"],"sourcesContent":["'use strict';\n\nexports.name = 'removeViewBox';\nexports.description = 'removes viewBox attribute when possible';\n\nconst viewBoxElems = ['svg', 'pattern', 'symbol'];\n\n/**\n * Remove viewBox attr which coincides with a width/height box.\n *\n * @see https://www.w3.org/TR/SVG11/coords.html#ViewBoxAttribute\n *\n * @example\n * <svg width=\"100\" height=\"50\" viewBox=\"0 0 100 50\">\n *             â¬‡\n * <svg width=\"100\" height=\"50\">\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeViewBox'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (\n          viewBoxElems.includes(node.name) &&\n          node.attributes.viewBox != null &&\n          node.attributes.width != null &&\n          node.attributes.height != null\n        ) {\n          // TODO remove width/height for such case instead\n          if (node.name === 'svg' && parentNode.type !== 'root') {\n            return;\n          }\n          const nums = node.attributes.viewBox.split(/[ ,]+/g);\n          if (\n            nums[0] === '0' &&\n            nums[1] === '0' &&\n            node.attributes.width.replace(/px$/, '') === nums[2] && // could use parseFloat too\n            node.attributes.height.replace(/px$/, '') === nums[3]\n          ) {\n            delete node.attributes.viewBox;\n          }\n        }\n      },\n    },\n  };\n};\n"]}}