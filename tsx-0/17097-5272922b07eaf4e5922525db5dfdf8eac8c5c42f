{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{parseSvg}=require(\"./parser.js\");const{stringifySvg}=require(\"./stringifier.js\");const{builtin}=require(\"./builtin.js\");const{invokePlugins}=require(\"./svgo/plugins.js\");const{encodeSVGDatauri}=require(\"./svgo/tools.js\");const pluginsMap={};for(const plugin of builtin){pluginsMap[plugin.name]=plugin}const resolvePluginConfig=__name(plugin=>{if(typeof plugin===\"string\"){const builtinPlugin=pluginsMap[plugin];if(builtinPlugin==null){throw Error(`Unknown builtin plugin \"${plugin}\" specified.`)}return{name:plugin,params:{},fn:builtinPlugin.fn}}if(typeof plugin===\"object\"&&plugin!=null){if(plugin.name==null){throw Error(`Plugin name should be specified`)}let fn=plugin.fn;if(fn==null){const builtinPlugin=pluginsMap[plugin.name];if(builtinPlugin==null){throw Error(`Unknown builtin plugin \"${plugin.name}\" specified.`)}fn=builtinPlugin.fn}return{name:plugin.name,params:plugin.params,fn}}return null},\"resolvePluginConfig\");const optimize=__name((input,config)=>{if(config==null){config={}}if(typeof config!==\"object\"){throw Error(\"Config should be an object\")}const maxPassCount=config.multipass?10:1;let prevResultSize=Number.POSITIVE_INFINITY;let output=\"\";const info={};if(config.path!=null){info.path=config.path}for(let i=0;i<maxPassCount;i+=1){info.multipassCount=i;const ast=parseSvg(input,config.path);const plugins=config.plugins||[\"preset-default\"];if(!Array.isArray(plugins)){throw Error(\"malformed config, `plugins` property must be an array.\\nSee more info here: https://github.com/svg/svgo#configuration\")}const resolvedPlugins=plugins.filter(plugin=>plugin!=null).map(resolvePluginConfig);if(resolvedPlugins.length<plugins.length){console.warn(\"Warning: plugins list includes null or undefined elements, these will be ignored.\")}const globalOverrides={};if(config.floatPrecision!=null){globalOverrides.floatPrecision=config.floatPrecision}invokePlugins(ast,info,resolvedPlugins,null,globalOverrides);output=stringifySvg(ast,config.js2svg);if(output.length<prevResultSize){input=output;prevResultSize=output.length}else{break}}if(config.datauri){output=encodeSVGDatauri(output,config.datauri)}return{data:output}},\"optimize\");exports.optimize=optimize;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,QAAS,EAAI,QAAQ,aAAa,EAC1C,KAAM,CAAE,YAAa,EAAI,QAAQ,kBAAkB,EACnD,KAAM,CAAE,OAAQ,EAAI,QAAQ,cAAc,EAC1C,KAAM,CAAE,aAAc,EAAI,QAAQ,mBAAmB,EACrD,KAAM,CAAE,gBAAiB,EAAI,QAAQ,iBAAiB,EAEtD,MAAM,WAAa,CAAC,EACpB,UAAW,UAAU,QAAS,CAC5B,WAAW,OAAO,IAAI,EAAI,MAC5B,CAEA,MAAM,oBAAsB,OAAC,QAAW,CACtC,GAAI,OAAO,SAAW,SAAU,CAE9B,MAAM,cAAgB,WAAW,MAAM,EACvC,GAAI,eAAiB,KAAM,CACzB,MAAM,MAAM,2BAA2B,MAAM,cAAc,CAC7D,CACA,MAAO,CACL,KAAM,OACN,OAAQ,CAAC,EACT,GAAI,cAAc,EACpB,CACF,CACA,GAAI,OAAO,SAAW,UAAY,QAAU,KAAM,CAChD,GAAI,OAAO,MAAQ,KAAM,CACvB,MAAM,MAAM,iCAAiC,CAC/C,CAEA,IAAI,GAAK,OAAO,GAChB,GAAI,IAAM,KAAM,CAEd,MAAM,cAAgB,WAAW,OAAO,IAAI,EAC5C,GAAI,eAAiB,KAAM,CACzB,MAAM,MAAM,2BAA2B,OAAO,IAAI,cAAc,CAClE,CACA,GAAK,cAAc,EACrB,CACA,MAAO,CACL,KAAM,OAAO,KACb,OAAQ,OAAO,OACf,EACF,CACF,CACA,OAAO,IACT,EAlC4B,uBAoC5B,MAAM,SAAW,QAAC,MAAO,SAAW,CAClC,GAAI,QAAU,KAAM,CAClB,OAAS,CAAC,CACZ,CACA,GAAI,OAAO,SAAW,SAAU,CAC9B,MAAM,MAAM,4BAA4B,CAC1C,CACA,MAAM,aAAe,OAAO,UAAY,GAAK,EAC7C,IAAI,eAAiB,OAAO,kBAC5B,IAAI,OAAS,GACb,MAAM,KAAO,CAAC,EACd,GAAI,OAAO,MAAQ,KAAM,CACvB,KAAK,KAAO,OAAO,IACrB,CACA,QAAS,EAAI,EAAG,EAAI,aAAc,GAAK,EAAG,CACxC,KAAK,eAAiB,EACtB,MAAM,IAAM,SAAS,MAAO,OAAO,IAAI,EACvC,MAAM,QAAU,OAAO,SAAW,CAAC,gBAAgB,EACnD,GAAI,CAAC,MAAM,QAAQ,OAAO,EAAG,CAC3B,MAAM,MACJ,uHACF,CACF,CACA,MAAM,gBAAkB,QACrB,OAAQ,QAAW,QAAU,IAAI,EACjC,IAAI,mBAAmB,EAE1B,GAAI,gBAAgB,OAAS,QAAQ,OAAQ,CAC3C,QAAQ,KACN,mFACF,CACF,CACA,MAAM,gBAAkB,CAAC,EACzB,GAAI,OAAO,gBAAkB,KAAM,CACjC,gBAAgB,eAAiB,OAAO,cAC1C,CACA,cAAc,IAAK,KAAM,gBAAiB,KAAM,eAAe,EAC/D,OAAS,aAAa,IAAK,OAAO,MAAM,EACxC,GAAI,OAAO,OAAS,eAAgB,CAClC,MAAQ,OACR,eAAiB,OAAO,MAC1B,KAAO,CACL,KACF,CACF,CACA,GAAI,OAAO,QAAS,CAClB,OAAS,iBAAiB,OAAQ,OAAO,OAAO,CAClD,CACA,MAAO,CACL,KAAM,MACR,CACF,EAnDiB,YAoDjB,QAAQ,SAAW","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/lib/svgo.js"],"sourcesContent":["'use strict';\n\nconst { parseSvg } = require('./parser.js');\nconst { stringifySvg } = require('./stringifier.js');\nconst { builtin } = require('./builtin.js');\nconst { invokePlugins } = require('./svgo/plugins.js');\nconst { encodeSVGDatauri } = require('./svgo/tools.js');\n\nconst pluginsMap = {};\nfor (const plugin of builtin) {\n  pluginsMap[plugin.name] = plugin;\n}\n\nconst resolvePluginConfig = (plugin) => {\n  if (typeof plugin === 'string') {\n    // resolve builtin plugin specified as string\n    const builtinPlugin = pluginsMap[plugin];\n    if (builtinPlugin == null) {\n      throw Error(`Unknown builtin plugin \"${plugin}\" specified.`);\n    }\n    return {\n      name: plugin,\n      params: {},\n      fn: builtinPlugin.fn,\n    };\n  }\n  if (typeof plugin === 'object' && plugin != null) {\n    if (plugin.name == null) {\n      throw Error(`Plugin name should be specified`);\n    }\n    // use custom plugin implementation\n    let fn = plugin.fn;\n    if (fn == null) {\n      // resolve builtin plugin implementation\n      const builtinPlugin = pluginsMap[plugin.name];\n      if (builtinPlugin == null) {\n        throw Error(`Unknown builtin plugin \"${plugin.name}\" specified.`);\n      }\n      fn = builtinPlugin.fn;\n    }\n    return {\n      name: plugin.name,\n      params: plugin.params,\n      fn,\n    };\n  }\n  return null;\n};\n\nconst optimize = (input, config) => {\n  if (config == null) {\n    config = {};\n  }\n  if (typeof config !== 'object') {\n    throw Error('Config should be an object');\n  }\n  const maxPassCount = config.multipass ? 10 : 1;\n  let prevResultSize = Number.POSITIVE_INFINITY;\n  let output = '';\n  const info = {};\n  if (config.path != null) {\n    info.path = config.path;\n  }\n  for (let i = 0; i < maxPassCount; i += 1) {\n    info.multipassCount = i;\n    const ast = parseSvg(input, config.path);\n    const plugins = config.plugins || ['preset-default'];\n    if (!Array.isArray(plugins)) {\n      throw Error(\n        'malformed config, `plugins` property must be an array.\\nSee more info here: https://github.com/svg/svgo#configuration'\n      );\n    }\n    const resolvedPlugins = plugins\n      .filter((plugin) => plugin != null)\n      .map(resolvePluginConfig);\n\n    if (resolvedPlugins.length < plugins.length) {\n      console.warn(\n        'Warning: plugins list includes null or undefined elements, these will be ignored.'\n      );\n    }\n    const globalOverrides = {};\n    if (config.floatPrecision != null) {\n      globalOverrides.floatPrecision = config.floatPrecision;\n    }\n    invokePlugins(ast, info, resolvedPlugins, null, globalOverrides);\n    output = stringifySvg(ast, config.js2svg);\n    if (output.length < prevResultSize) {\n      input = output;\n      prevResultSize = output.length;\n    } else {\n      break;\n    }\n  }\n  if (config.datauri) {\n    output = encodeSVGDatauri(output, config.datauri);\n  }\n  return {\n    data: output,\n  };\n};\nexports.optimize = optimize;\n"]}}