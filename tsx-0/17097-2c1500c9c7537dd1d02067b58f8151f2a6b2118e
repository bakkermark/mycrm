{"code":"(()=>{\n\"use strict\";exports.name=\"removeAttrs\";exports.description=\"removes specified attributes\";const DEFAULT_SEPARATOR=\":\";const ENOATTRS=`Warning: The plugin \"removeAttrs\" requires the \"attrs\" parameter.\nIt should have a pattern to remove, otherwise the plugin is a noop.\nConfig example:\n\nplugins: [\n  {\n    name: \"removeAttrs\",\n    params: {\n      attrs: \"(fill|stroke)\"\n    }\n  }\n]\n`;exports.fn=(root,params)=>{if(typeof params.attrs==\"undefined\"){console.warn(ENOATTRS);return null}const elemSeparator=typeof params.elemSeparator==\"string\"?params.elemSeparator:DEFAULT_SEPARATOR;const preserveCurrentColor=typeof params.preserveCurrentColor==\"boolean\"?params.preserveCurrentColor:false;const attrs=Array.isArray(params.attrs)?params.attrs:[params.attrs];return{element:{enter:node=>{for(let pattern of attrs){if(pattern.includes(elemSeparator)===false){pattern=[\".*\",elemSeparator,pattern,elemSeparator,\".*\"].join(\"\")}else if(pattern.split(elemSeparator).length<3){pattern=[pattern,elemSeparator,\".*\"].join(\"\")}const list=pattern.split(elemSeparator).map(value=>{if(value===\"*\"){value=\".*\"}return new RegExp([\"^\",value,\"$\"].join(\"\"),\"i\")});if(list[0].test(node.name)){for(const[name,value]of Object.entries(node.attributes)){const isFillCurrentColor=preserveCurrentColor&&name==\"fill\"&&value==\"currentColor\";const isStrokeCurrentColor=preserveCurrentColor&&name==\"stroke\"&&value==\"currentColor\";if(!isFillCurrentColor&&!isStrokeCurrentColor&&list[1].test(name)&&list[2].test(value)){delete node.attributes[name]}}}}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,QAAQ,KAAO,cACf,QAAQ,YAAc,+BAEtB,MAAM,kBAAoB,IAC1B,MAAM,SAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+EjB,QAAQ,GAAK,CAAC,KAAM,SAAW,CAC7B,GAAI,OAAO,OAAO,OAAS,YAAa,CACtC,QAAQ,KAAK,QAAQ,EACrB,OAAO,IACT,CAEA,MAAM,cACJ,OAAO,OAAO,eAAiB,SAC3B,OAAO,cACP,kBACN,MAAM,qBACJ,OAAO,OAAO,sBAAwB,UAClC,OAAO,qBACP,MACN,MAAM,MAAQ,MAAM,QAAQ,OAAO,KAAK,EAAI,OAAO,MAAQ,CAAC,OAAO,KAAK,EAExE,MAAO,CACL,QAAS,CACP,MAAQ,MAAS,CACf,QAAS,WAAW,MAAO,CAEzB,GAAI,QAAQ,SAAS,aAAa,IAAM,MAAO,CAC7C,QAAU,CAAC,KAAM,cAAe,QAAS,cAAe,IAAI,EAAE,KAC5D,EACF,CAEF,SAAW,QAAQ,MAAM,aAAa,EAAE,OAAS,EAAG,CAClD,QAAU,CAAC,QAAS,cAAe,IAAI,EAAE,KAAK,EAAE,CAClD,CAGA,MAAM,KAAO,QAAQ,MAAM,aAAa,EAAE,IAAK,OAAU,CAEvD,GAAI,QAAU,IAAK,CACjB,MAAQ,IACV,CACA,OAAO,IAAI,OAAO,CAAC,IAAK,MAAO,GAAG,EAAE,KAAK,EAAE,EAAG,GAAG,CACnD,CAAC,EAGD,GAAI,KAAK,CAAC,EAAE,KAAK,KAAK,IAAI,EAAG,CAE3B,SAAW,CAAC,KAAM,KAAK,IAAK,OAAO,QAAQ,KAAK,UAAU,EAAG,CAC3D,MAAM,mBACJ,sBACA,MAAQ,QACR,OAAS,eACX,MAAM,qBACJ,sBACA,MAAQ,UACR,OAAS,eACX,GACE,CAAC,oBACD,CAAC,sBAED,KAAK,CAAC,EAAE,KAAK,IAAI,GAEjB,KAAK,CAAC,EAAE,KAAK,KAAK,EAClB,CACA,OAAO,KAAK,WAAW,IAAI,CAC7B,CACF,CACF,CACF,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/removeAttrs.js"],"sourcesContent":["'use strict';\n\nexports.name = 'removeAttrs';\nexports.description = 'removes specified attributes';\n\nconst DEFAULT_SEPARATOR = ':';\nconst ENOATTRS = `Warning: The plugin \"removeAttrs\" requires the \"attrs\" parameter.\nIt should have a pattern to remove, otherwise the plugin is a noop.\nConfig example:\n\nplugins: [\n  {\n    name: \"removeAttrs\",\n    params: {\n      attrs: \"(fill|stroke)\"\n    }\n  }\n]\n`;\n\n/**\n * Remove attributes\n *\n * @example elemSeparator\n *   format: string\n *\n * @example preserveCurrentColor\n *   format: boolean\n *\n * @example attrs:\n *\n *   format: [ element* : attribute* : value* ]\n *\n *   element   : regexp (wrapped into ^...$), single * or omitted > all elements (must be present when value is used)\n *   attribute : regexp (wrapped into ^...$)\n *   value     : regexp (wrapped into ^...$), single * or omitted > all values\n *\n *   examples:\n *\n *     > basic: remove fill attribute\n *     ---\n *     removeAttrs:\n *       attrs: 'fill'\n *\n *     > remove fill attribute on path element\n *     ---\n *       attrs: 'path:fill'\n *\n *     > remove fill attribute on path element where value is none\n *     ---\n *       attrs: 'path:fill:none'\n *\n *\n *     > remove all fill and stroke attribute\n *     ---\n *       attrs:\n *         - 'fill'\n *         - 'stroke'\n *\n *     [is same as]\n *\n *       attrs: '(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke)'\n *\n *     [is same as]\n *\n *       attrs: '.*:(fill|stroke):.*'\n *\n *\n *     > remove all stroke related attributes\n *     ----\n *     attrs: 'stroke.*'\n *\n *\n * @author Benny Schudel\n *\n * @type {import('./plugins-types').Plugin<'removeAttrs'>}\n */\nexports.fn = (root, params) => {\n  if (typeof params.attrs == 'undefined') {\n    console.warn(ENOATTRS);\n    return null;\n  }\n\n  const elemSeparator =\n    typeof params.elemSeparator == 'string'\n      ? params.elemSeparator\n      : DEFAULT_SEPARATOR;\n  const preserveCurrentColor =\n    typeof params.preserveCurrentColor == 'boolean'\n      ? params.preserveCurrentColor\n      : false;\n  const attrs = Array.isArray(params.attrs) ? params.attrs : [params.attrs];\n\n  return {\n    element: {\n      enter: (node) => {\n        for (let pattern of attrs) {\n          // if no element separators (:), assume it's attribute name, and apply to all elements *regardless of value*\n          if (pattern.includes(elemSeparator) === false) {\n            pattern = ['.*', elemSeparator, pattern, elemSeparator, '.*'].join(\n              ''\n            );\n            // if only 1 separator, assume it's element and attribute name, and apply regardless of attribute value\n          } else if (pattern.split(elemSeparator).length < 3) {\n            pattern = [pattern, elemSeparator, '.*'].join('');\n          }\n\n          // create regexps for element, attribute name, and attribute value\n          const list = pattern.split(elemSeparator).map((value) => {\n            // adjust single * to match anything\n            if (value === '*') {\n              value = '.*';\n            }\n            return new RegExp(['^', value, '$'].join(''), 'i');\n          });\n\n          // matches element\n          if (list[0].test(node.name)) {\n            // loop attributes\n            for (const [name, value] of Object.entries(node.attributes)) {\n              const isFillCurrentColor =\n                preserveCurrentColor &&\n                name == 'fill' &&\n                value == 'currentColor';\n              const isStrokeCurrentColor =\n                preserveCurrentColor &&\n                name == 'stroke' &&\n                value == 'currentColor';\n              if (\n                !isFillCurrentColor &&\n                !isStrokeCurrentColor &&\n                // matches attribute name\n                list[1].test(name) &&\n                // matches attribute value\n                list[2].test(value)\n              ) {\n                delete node.attributes[name];\n              }\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"]}}