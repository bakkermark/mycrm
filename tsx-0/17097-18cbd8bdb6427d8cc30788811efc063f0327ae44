{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{constants:BufferConstants}=require(\"buffer\");const pump=require(\"pump\");const bufferStream=require(\"./buffer-stream\");class MaxBufferError extends Error{static{__name(this,\"MaxBufferError\")}constructor(){super(\"maxBuffer exceeded\");this.name=\"MaxBufferError\"}}async function getStream(inputStream,options){if(!inputStream){return Promise.reject(new Error(\"Expected a stream\"))}options={maxBuffer:Infinity,...options};const{maxBuffer}=options;let stream;await new Promise((resolve,reject)=>{const rejectPromise=__name(error=>{if(error&&stream.getBufferedLength()<=BufferConstants.MAX_LENGTH){error.bufferedData=stream.getBufferedValue()}reject(error)},\"rejectPromise\");stream=pump(inputStream,bufferStream(options),error=>{if(error){rejectPromise(error);return}resolve()});stream.on(\"data\",()=>{if(stream.getBufferedLength()>maxBuffer){rejectPromise(new MaxBufferError)}})});return stream.getBufferedValue()}__name(getStream,\"getStream\");module.exports=getStream;module.exports.default=getStream;module.exports.buffer=(stream,options)=>getStream(stream,{...options,encoding:\"buffer\"});module.exports.array=(stream,options)=>getStream(stream,{...options,array:true});module.exports.MaxBufferError=MaxBufferError;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,KAAM,CAAC,UAAW,eAAe,EAAI,QAAQ,QAAQ,EACrD,MAAM,KAAO,QAAQ,MAAM,EAC3B,MAAM,aAAe,QAAQ,iBAAiB,EAE9C,MAAM,uBAAuB,KAAM,CALnC,MAKmC,+BAClC,aAAc,CACb,MAAM,oBAAoB,EAC1B,KAAK,KAAO,gBACb,CACD,CAEA,eAAe,UAAU,YAAa,QAAS,CAC9C,GAAI,CAAC,YAAa,CACjB,OAAO,QAAQ,OAAO,IAAI,MAAM,mBAAmB,CAAC,CACrD,CAEA,QAAU,CACT,UAAW,SACX,GAAG,OACJ,EAEA,KAAM,CAAC,SAAS,EAAI,QAEpB,IAAI,OACJ,MAAM,IAAI,QAAQ,CAAC,QAAS,SAAW,CACtC,MAAM,cAAgB,cAAS,CAE9B,GAAI,OAAS,OAAO,kBAAkB,GAAK,gBAAgB,WAAY,CACtE,MAAM,aAAe,OAAO,iBAAiB,CAC9C,CAEA,OAAO,KAAK,CACb,EAPsB,iBAStB,OAAS,KAAK,YAAa,aAAa,OAAO,EAAG,OAAS,CAC1D,GAAI,MAAO,CACV,cAAc,KAAK,EACnB,MACD,CAEA,QAAQ,CACT,CAAC,EAED,OAAO,GAAG,OAAQ,IAAM,CACvB,GAAI,OAAO,kBAAkB,EAAI,UAAW,CAC3C,cAAc,IAAI,cAAgB,CACnC,CACD,CAAC,CACF,CAAC,EAED,OAAO,OAAO,iBAAiB,CAChC,CAxCe,8BA0Cf,OAAO,QAAU,UAEjB,OAAO,QAAQ,QAAU,UACzB,OAAO,QAAQ,OAAS,CAAC,OAAQ,UAAY,UAAU,OAAQ,CAAC,GAAG,QAAS,SAAU,QAAQ,CAAC,EAC/F,OAAO,QAAQ,MAAQ,CAAC,OAAQ,UAAY,UAAU,OAAQ,CAAC,GAAG,QAAS,MAAO,IAAI,CAAC,EACvF,OAAO,QAAQ,eAAiB","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/get-stream@5.2.0/node_modules/get-stream/index.js"],"sourcesContent":["'use strict';\nconst {constants: BufferConstants} = require('buffer');\nconst pump = require('pump');\nconst bufferStream = require('./buffer-stream');\n\nclass MaxBufferError extends Error {\n\tconstructor() {\n\t\tsuper('maxBuffer exceeded');\n\t\tthis.name = 'MaxBufferError';\n\t}\n}\n\nasync function getStream(inputStream, options) {\n\tif (!inputStream) {\n\t\treturn Promise.reject(new Error('Expected a stream'));\n\t}\n\n\toptions = {\n\t\tmaxBuffer: Infinity,\n\t\t...options\n\t};\n\n\tconst {maxBuffer} = options;\n\n\tlet stream;\n\tawait new Promise((resolve, reject) => {\n\t\tconst rejectPromise = error => {\n\t\t\t// Don't retrieve an oversized buffer.\n\t\t\tif (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {\n\t\t\t\terror.bufferedData = stream.getBufferedValue();\n\t\t\t}\n\n\t\t\treject(error);\n\t\t};\n\n\t\tstream = pump(inputStream, bufferStream(options), error => {\n\t\t\tif (error) {\n\t\t\t\trejectPromise(error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\n\t\tstream.on('data', () => {\n\t\t\tif (stream.getBufferedLength() > maxBuffer) {\n\t\t\t\trejectPromise(new MaxBufferError());\n\t\t\t}\n\t\t});\n\t});\n\n\treturn stream.getBufferedValue();\n}\n\nmodule.exports = getStream;\n// TODO: Remove this for the next major release\nmodule.exports.default = getStream;\nmodule.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: 'buffer'});\nmodule.exports.array = (stream, options) => getStream(stream, {...options, array: true});\nmodule.exports.MaxBufferError = MaxBufferError;\n"]}}