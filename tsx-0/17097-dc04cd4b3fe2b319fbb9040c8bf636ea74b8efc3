{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const tty=require(\"tty\");const util=require(\"util\");exports.init=init;exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;exports.destroy=util.deprecate(()=>{},\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");exports.colors=[6,2,3,4,5,1];try{const supportsColor=require(\"supports-color\");if(supportsColor&&(supportsColor.stderr||supportsColor).level>=2){exports.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221]}}catch(error){}exports.inspectOpts=Object.keys(process.env).filter(key=>{return/^debug_/i.test(key)}).reduce((obj,key)=>{const prop=key.substring(6).toLowerCase().replace(/_([a-z])/g,(_,k)=>{return k.toUpperCase()});let val=process.env[key];if(/^(yes|on|true|enabled)$/i.test(val)){val=true}else if(/^(no|off|false|disabled)$/i.test(val)){val=false}else if(val===\"null\"){val=null}else{val=Number(val)}obj[prop]=val;return obj},{});function useColors(){return\"colors\"in exports.inspectOpts?Boolean(exports.inspectOpts.colors):tty.isatty(process.stderr.fd)}__name(useColors,\"useColors\");function formatArgs(args){const{namespace:name,useColors:useColors2}=this;if(useColors2){const c=this.color;const colorCode=\"\\x1B[3\"+(c<8?c:\"8;5;\"+c);const prefix=`  ${colorCode};1m${name} \\x1B[0m`;args[0]=prefix+args[0].split(\"\\n\").join(\"\\n\"+prefix);args.push(colorCode+\"m+\"+module.exports.humanize(this.diff)+\"\\x1B[0m\")}else{args[0]=getDate()+name+\" \"+args[0]}}__name(formatArgs,\"formatArgs\");function getDate(){if(exports.inspectOpts.hideDate){return\"\"}return new Date().toISOString()+\" \"}__name(getDate,\"getDate\");function log(...args){return process.stderr.write(util.format(...args)+\"\\n\")}__name(log,\"log\");function save(namespaces){if(namespaces){process.env.DEBUG=namespaces}else{delete process.env.DEBUG}}__name(save,\"save\");function load(){return process.env.DEBUG}__name(load,\"load\");function init(debug){debug.inspectOpts={};const keys=Object.keys(exports.inspectOpts);for(let i=0;i<keys.length;i++){debug.inspectOpts[keys[i]]=exports.inspectOpts[keys[i]]}}__name(init,\"init\");module.exports=require(\"./common\")(exports);const{formatters}=module.exports;formatters.o=function(v){this.inspectOpts.colors=this.useColors;return util.inspect(v,this.inspectOpts).split(\"\\n\").map(str=>str.trim()).join(\" \")};formatters.O=function(v){this.inspectOpts.colors=this.useColors;return util.inspect(v,this.inspectOpts)};\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["useColors"],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n"]}}