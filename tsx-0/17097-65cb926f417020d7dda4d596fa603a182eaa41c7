{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.serializeArray=exports.serialize=void 0;var utils_js_1=require(\"../utils.js\");var submittableSelector=\"input,select,textarea,keygen\";var r20=/%20/g;var rCRLF=/\\r?\\n/g;function serialize(){var arr=this.serializeArray();var retArr=arr.map(function(data){return\"\".concat(encodeURIComponent(data.name),\"=\").concat(encodeURIComponent(data.value))});return retArr.join(\"&\").replace(r20,\"+\")}__name(serialize,\"serialize\");exports.serialize=serialize;function serializeArray(){var _this=this;return this.map(function(_,elem){var $elem=_this._make(elem);if((0,utils_js_1.isTag)(elem)&&elem.name===\"form\"){return $elem.find(submittableSelector).toArray()}return $elem.filter(submittableSelector).toArray()}).filter('[name!=\"\"]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))').map(function(_,elem){var _a;var $elem=_this._make(elem);var name=$elem.attr(\"name\");var value=(_a=$elem.val())!==null&&_a!==void 0?_a:\"\";if(Array.isArray(value)){return value.map(function(val){return{name,value:val.replace(rCRLF,\"\\r\\n\")}})}return{name,value:value.replace(rCRLF,\"\\r\\n\")}}).toArray()}__name(serializeArray,\"serializeArray\");exports.serializeArray=serializeArray;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,QAAQ,eAAiB,QAAQ,UAAY,OAC7C,IAAI,WAAa,QAAQ,aAAa,EAKtC,IAAI,oBAAsB,+BAC1B,IAAI,IAAM,OACV,IAAI,MAAQ,SAeZ,SAAS,WAAY,CAEjB,IAAI,IAAM,KAAK,eAAe,EAE9B,IAAI,OAAS,IAAI,IAAI,SAAU,KAAM,CACjC,MAAO,GAAG,OAAO,mBAAmB,KAAK,IAAI,EAAG,GAAG,EAAE,OAAO,mBAAmB,KAAK,KAAK,CAAC,CAC9F,CAAC,EAED,OAAO,OAAO,KAAK,GAAG,EAAE,QAAQ,IAAK,GAAG,CAC5C,CATS,8BAUT,QAAQ,UAAY,UAepB,SAAS,gBAAiB,CACtB,IAAI,MAAQ,KAEZ,OAAO,KAAK,IAAI,SAAU,EAAG,KAAM,CAC/B,IAAI,MAAQ,MAAM,MAAM,IAAI,EAC5B,IAAK,EAAG,WAAW,OAAO,IAAI,GAAK,KAAK,OAAS,OAAQ,CACrD,OAAO,MAAM,KAAK,mBAAmB,EAAE,QAAQ,CACnD,CACA,OAAO,MAAM,OAAO,mBAAmB,EAAE,QAAQ,CACrD,CAAC,EACI,OAEL,6GAMA,EACK,IAAI,SAAU,EAAG,KAAM,CACxB,IAAI,GACJ,IAAI,MAAQ,MAAM,MAAM,IAAI,EAC5B,IAAI,KAAO,MAAM,KAAK,MAAM,EAE5B,IAAI,OAAS,GAAK,MAAM,IAAI,KAAO,MAAQ,KAAO,OAAS,GAAK,GAEhE,GAAI,MAAM,QAAQ,KAAK,EAAG,CACtB,OAAO,MAAM,IAAI,SAAU,IAAK,CAK5B,MAAQ,CAAE,KAAY,MAAO,IAAI,QAAQ,MAAO,MAAM,CAAE,CAC5D,CAAC,CACL,CAEA,MAAO,CAAE,KAAY,MAAO,MAAM,QAAQ,MAAO,MAAM,CAAE,CAC7D,CAAC,EACI,QAAQ,CACjB,CAvCS,wCAwCT,QAAQ,eAAiB","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/cheerio@1.0.0-rc.12/node_modules/cheerio/lib/api/forms.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeArray = exports.serialize = void 0;\nvar utils_js_1 = require(\"../utils.js\");\n/*\n * https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n * https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\n */\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serialize();\n * //=> 'foo=bar'\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serialize/}\n */\nfunction serialize() {\n    // Convert form elements into name/value objects\n    var arr = this.serializeArray();\n    // Serialize each element into a key/value string\n    var retArr = arr.map(function (data) {\n        return \"\".concat(encodeURIComponent(data.name), \"=\").concat(encodeURIComponent(data.value));\n    });\n    // Return the resulting serialization\n    return retArr.join('&').replace(r20, '+');\n}\nexports.serialize = serialize;\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @category Forms\n * @example\n *\n * ```js\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray();\n * //=> [ { name: 'foo', value: 'bar' } ]\n * ```\n *\n * @returns The serialized form.\n * @see {@link https://api.jquery.com/serializeArray/}\n */\nfunction serializeArray() {\n    var _this = this;\n    // Resolve all form elements from either forms or collections of form elements\n    return this.map(function (_, elem) {\n        var $elem = _this._make(elem);\n        if ((0, utils_js_1.isTag)(elem) && elem.name === 'form') {\n            return $elem.find(submittableSelector).toArray();\n        }\n        return $elem.filter(submittableSelector).toArray();\n    })\n        .filter(\n    // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)\n    '[name!=\"\"]:enabled' +\n        // And cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        ':not(:submit, :button, :image, :reset, :file)' +\n        // And are either checked/don't have a checkable state\n        ':matches([checked], :not(:checkbox, :radio))'\n    // Convert each of the elements to its value(s)\n    )\n        .map(function (_, elem) {\n        var _a;\n        var $elem = _this._make(elem);\n        var name = $elem.attr('name'); // We have filtered for elements with a name before.\n        // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n        var value = (_a = $elem.val()) !== null && _a !== void 0 ? _a : '';\n        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                /*\n                 * We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n                 * These can occur inside of `<textarea>'s`\n                 */\n                return ({ name: name, value: val.replace(rCRLF, '\\r\\n') });\n            });\n        }\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n        return { name: name, value: value.replace(rCRLF, '\\r\\n') };\n    })\n        .toArray();\n}\nexports.serializeArray = serializeArray;\n//# sourceMappingURL=forms.js.map"]}}