{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var __createBinding=exports&&exports.__createBinding||(Object.create?function(o,m,k,k2){if(k2===void 0)k2=k;var desc=Object.getOwnPropertyDescriptor(m,k);if(!desc||(\"get\"in desc?!m.__esModule:desc.writable||desc.configurable)){desc={enumerable:true,get:function(){return m[k]}}}Object.defineProperty(o,k2,desc)}:function(o,m,k,k2){if(k2===void 0)k2=k;o[k2]=m[k]});var __setModuleDefault=exports&&exports.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,\"default\",{enumerable:true,value:v})}:function(o,v){o[\"default\"]=v});var __importStar=exports&&exports.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null){for(var k in mod)if(k!==\"default\"&&Object.prototype.hasOwnProperty.call(mod,k))__createBinding(result,mod,k)}__setModuleDefault(result,mod);return result};var __importDefault=exports&&exports.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod}};Object.defineProperty(exports,\"__esModule\",{value:true});exports.decodeXML=exports.decodeHTMLStrict=exports.decodeHTMLAttribute=exports.decodeHTML=exports.determineBranch=exports.EntityDecoder=exports.DecodingMode=exports.BinTrieFlags=exports.fromCodePoint=exports.replaceCodePoint=exports.decodeCodePoint=exports.xmlDecodeTree=exports.htmlDecodeTree=void 0;var decode_data_html_js_1=__importDefault(require(\"./generated/decode-data-html.js\"));exports.htmlDecodeTree=decode_data_html_js_1.default;var decode_data_xml_js_1=__importDefault(require(\"./generated/decode-data-xml.js\"));exports.xmlDecodeTree=decode_data_xml_js_1.default;var decode_codepoint_js_1=__importStar(require(\"./decode_codepoint.js\"));exports.decodeCodePoint=decode_codepoint_js_1.default;var decode_codepoint_js_2=require(\"./decode_codepoint.js\");Object.defineProperty(exports,\"replaceCodePoint\",{enumerable:true,get:function(){return decode_codepoint_js_2.replaceCodePoint}});Object.defineProperty(exports,\"fromCodePoint\",{enumerable:true,get:function(){return decode_codepoint_js_2.fromCodePoint}});var CharCodes;(function(CharCodes2){CharCodes2[CharCodes2[\"NUM\"]=35]=\"NUM\";CharCodes2[CharCodes2[\"SEMI\"]=59]=\"SEMI\";CharCodes2[CharCodes2[\"EQUALS\"]=61]=\"EQUALS\";CharCodes2[CharCodes2[\"ZERO\"]=48]=\"ZERO\";CharCodes2[CharCodes2[\"NINE\"]=57]=\"NINE\";CharCodes2[CharCodes2[\"LOWER_A\"]=97]=\"LOWER_A\";CharCodes2[CharCodes2[\"LOWER_F\"]=102]=\"LOWER_F\";CharCodes2[CharCodes2[\"LOWER_X\"]=120]=\"LOWER_X\";CharCodes2[CharCodes2[\"LOWER_Z\"]=122]=\"LOWER_Z\";CharCodes2[CharCodes2[\"UPPER_A\"]=65]=\"UPPER_A\";CharCodes2[CharCodes2[\"UPPER_F\"]=70]=\"UPPER_F\";CharCodes2[CharCodes2[\"UPPER_Z\"]=90]=\"UPPER_Z\"})(CharCodes||(CharCodes={}));var TO_LOWER_BIT=32;var BinTrieFlags;(function(BinTrieFlags2){BinTrieFlags2[BinTrieFlags2[\"VALUE_LENGTH\"]=49152]=\"VALUE_LENGTH\";BinTrieFlags2[BinTrieFlags2[\"BRANCH_LENGTH\"]=16256]=\"BRANCH_LENGTH\";BinTrieFlags2[BinTrieFlags2[\"JUMP_TABLE\"]=127]=\"JUMP_TABLE\"})(BinTrieFlags=exports.BinTrieFlags||(exports.BinTrieFlags={}));function isNumber(code){return code>=CharCodes.ZERO&&code<=CharCodes.NINE}__name(isNumber,\"isNumber\");function isHexadecimalCharacter(code){return code>=CharCodes.UPPER_A&&code<=CharCodes.UPPER_F||code>=CharCodes.LOWER_A&&code<=CharCodes.LOWER_F}__name(isHexadecimalCharacter,\"isHexadecimalCharacter\");function isAsciiAlphaNumeric(code){return code>=CharCodes.UPPER_A&&code<=CharCodes.UPPER_Z||code>=CharCodes.LOWER_A&&code<=CharCodes.LOWER_Z||isNumber(code)}__name(isAsciiAlphaNumeric,\"isAsciiAlphaNumeric\");function isEntityInAttributeInvalidEnd(code){return code===CharCodes.EQUALS||isAsciiAlphaNumeric(code)}__name(isEntityInAttributeInvalidEnd,\"isEntityInAttributeInvalidEnd\");var EntityDecoderState;(function(EntityDecoderState2){EntityDecoderState2[EntityDecoderState2[\"EntityStart\"]=0]=\"EntityStart\";EntityDecoderState2[EntityDecoderState2[\"NumericStart\"]=1]=\"NumericStart\";EntityDecoderState2[EntityDecoderState2[\"NumericDecimal\"]=2]=\"NumericDecimal\";EntityDecoderState2[EntityDecoderState2[\"NumericHex\"]=3]=\"NumericHex\";EntityDecoderState2[EntityDecoderState2[\"NamedEntity\"]=4]=\"NamedEntity\"})(EntityDecoderState||(EntityDecoderState={}));var DecodingMode;(function(DecodingMode2){DecodingMode2[DecodingMode2[\"Legacy\"]=0]=\"Legacy\";DecodingMode2[DecodingMode2[\"Strict\"]=1]=\"Strict\";DecodingMode2[DecodingMode2[\"Attribute\"]=2]=\"Attribute\"})(DecodingMode=exports.DecodingMode||(exports.DecodingMode={}));var EntityDecoder=function(){function EntityDecoder2(decodeTree,emitCodePoint,errors){this.decodeTree=decodeTree;this.emitCodePoint=emitCodePoint;this.errors=errors;this.state=EntityDecoderState.EntityStart;this.consumed=1;this.result=0;this.treeIndex=0;this.excess=1;this.decodeMode=DecodingMode.Strict}__name(EntityDecoder2,\"EntityDecoder\");EntityDecoder2.prototype.startEntity=function(decodeMode){this.decodeMode=decodeMode;this.state=EntityDecoderState.EntityStart;this.result=0;this.treeIndex=0;this.excess=1;this.consumed=1};EntityDecoder2.prototype.write=function(str,offset){switch(this.state){case EntityDecoderState.EntityStart:{if(str.charCodeAt(offset)===CharCodes.NUM){this.state=EntityDecoderState.NumericStart;this.consumed+=1;return this.stateNumericStart(str,offset+1)}this.state=EntityDecoderState.NamedEntity;return this.stateNamedEntity(str,offset)}case EntityDecoderState.NumericStart:{return this.stateNumericStart(str,offset)}case EntityDecoderState.NumericDecimal:{return this.stateNumericDecimal(str,offset)}case EntityDecoderState.NumericHex:{return this.stateNumericHex(str,offset)}case EntityDecoderState.NamedEntity:{return this.stateNamedEntity(str,offset)}}};EntityDecoder2.prototype.stateNumericStart=function(str,offset){if(offset>=str.length){return-1}if((str.charCodeAt(offset)|TO_LOWER_BIT)===CharCodes.LOWER_X){this.state=EntityDecoderState.NumericHex;this.consumed+=1;return this.stateNumericHex(str,offset+1)}this.state=EntityDecoderState.NumericDecimal;return this.stateNumericDecimal(str,offset)};EntityDecoder2.prototype.addToNumericResult=function(str,start,end,base){if(start!==end){var digitCount=end-start;this.result=this.result*Math.pow(base,digitCount)+parseInt(str.substr(start,digitCount),base);this.consumed+=digitCount}};EntityDecoder2.prototype.stateNumericHex=function(str,offset){var startIdx=offset;while(offset<str.length){var char=str.charCodeAt(offset);if(isNumber(char)||isHexadecimalCharacter(char)){offset+=1}else{this.addToNumericResult(str,startIdx,offset,16);return this.emitNumericEntity(char,3)}}this.addToNumericResult(str,startIdx,offset,16);return-1};EntityDecoder2.prototype.stateNumericDecimal=function(str,offset){var startIdx=offset;while(offset<str.length){var char=str.charCodeAt(offset);if(isNumber(char)){offset+=1}else{this.addToNumericResult(str,startIdx,offset,10);return this.emitNumericEntity(char,2)}}this.addToNumericResult(str,startIdx,offset,10);return-1};EntityDecoder2.prototype.emitNumericEntity=function(lastCp,expectedLength){var _a;if(this.consumed<=expectedLength){(_a=this.errors)===null||_a===void 0?void 0:_a.absenceOfDigitsInNumericCharacterReference(this.consumed);return 0}if(lastCp===CharCodes.SEMI){this.consumed+=1}else if(this.decodeMode===DecodingMode.Strict){return 0}this.emitCodePoint((0,decode_codepoint_js_1.replaceCodePoint)(this.result),this.consumed);if(this.errors){if(lastCp!==CharCodes.SEMI){this.errors.missingSemicolonAfterCharacterReference()}this.errors.validateNumericCharacterReference(this.result)}return this.consumed};EntityDecoder2.prototype.stateNamedEntity=function(str,offset){var decodeTree=this.decodeTree;var current=decodeTree[this.treeIndex];var valueLength=(current&BinTrieFlags.VALUE_LENGTH)>>14;for(;offset<str.length;offset++,this.excess++){var char=str.charCodeAt(offset);this.treeIndex=determineBranch(decodeTree,current,this.treeIndex+Math.max(1,valueLength),char);if(this.treeIndex<0){return this.result===0||this.decodeMode===DecodingMode.Attribute&&(valueLength===0||isEntityInAttributeInvalidEnd(char))?0:this.emitNotTerminatedNamedEntity()}current=decodeTree[this.treeIndex];valueLength=(current&BinTrieFlags.VALUE_LENGTH)>>14;if(valueLength!==0){if(char===CharCodes.SEMI){return this.emitNamedEntityData(this.treeIndex,valueLength,this.consumed+this.excess)}if(this.decodeMode!==DecodingMode.Strict){this.result=this.treeIndex;this.consumed+=this.excess;this.excess=0}}}return-1};EntityDecoder2.prototype.emitNotTerminatedNamedEntity=function(){var _a;var _b=this,result=_b.result,decodeTree=_b.decodeTree;var valueLength=(decodeTree[result]&BinTrieFlags.VALUE_LENGTH)>>14;this.emitNamedEntityData(result,valueLength,this.consumed);(_a=this.errors)===null||_a===void 0?void 0:_a.missingSemicolonAfterCharacterReference();return this.consumed};EntityDecoder2.prototype.emitNamedEntityData=function(result,valueLength,consumed){var decodeTree=this.decodeTree;this.emitCodePoint(valueLength===1?decodeTree[result]&~BinTrieFlags.VALUE_LENGTH:decodeTree[result+1],consumed);if(valueLength===3){this.emitCodePoint(decodeTree[result+2],consumed)}return consumed};EntityDecoder2.prototype.end=function(){var _a;switch(this.state){case EntityDecoderState.NamedEntity:{return this.result!==0&&(this.decodeMode!==DecodingMode.Attribute||this.result===this.treeIndex)?this.emitNotTerminatedNamedEntity():0}case EntityDecoderState.NumericDecimal:{return this.emitNumericEntity(0,2)}case EntityDecoderState.NumericHex:{return this.emitNumericEntity(0,3)}case EntityDecoderState.NumericStart:{(_a=this.errors)===null||_a===void 0?void 0:_a.absenceOfDigitsInNumericCharacterReference(this.consumed);return 0}case EntityDecoderState.EntityStart:{return 0}}};return EntityDecoder2}();exports.EntityDecoder=EntityDecoder;function getDecoder(decodeTree){var ret=\"\";var decoder=new EntityDecoder(decodeTree,function(str){return ret+=(0,decode_codepoint_js_1.fromCodePoint)(str)});return __name(function decodeWithTrie(str,decodeMode){var lastIndex=0;var offset=0;while((offset=str.indexOf(\"&\",offset))>=0){ret+=str.slice(lastIndex,offset);decoder.startEntity(decodeMode);var len=decoder.write(str,offset+1);if(len<0){lastIndex=offset+decoder.end();break}lastIndex=offset+len;offset=len===0?lastIndex+1:lastIndex}var result=ret+str.slice(lastIndex);ret=\"\";return result},\"decodeWithTrie\")}__name(getDecoder,\"getDecoder\");function determineBranch(decodeTree,current,nodeIdx,char){var branchCount=(current&BinTrieFlags.BRANCH_LENGTH)>>7;var jumpOffset=current&BinTrieFlags.JUMP_TABLE;if(branchCount===0){return jumpOffset!==0&&char===jumpOffset?nodeIdx:-1}if(jumpOffset){var value=char-jumpOffset;return value<0||value>=branchCount?-1:decodeTree[nodeIdx+value]-1}var lo=nodeIdx;var hi=lo+branchCount-1;while(lo<=hi){var mid=lo+hi>>>1;var midVal=decodeTree[mid];if(midVal<char){lo=mid+1}else if(midVal>char){hi=mid-1}else{return decodeTree[mid+branchCount]}}return-1}__name(determineBranch,\"determineBranch\");exports.determineBranch=determineBranch;var htmlDecoder=getDecoder(decode_data_html_js_1.default);var xmlDecoder=getDecoder(decode_data_xml_js_1.default);function decodeHTML(str,mode){if(mode===void 0){mode=DecodingMode.Legacy}return htmlDecoder(str,mode)}__name(decodeHTML,\"decodeHTML\");exports.decodeHTML=decodeHTML;function decodeHTMLAttribute(str){return htmlDecoder(str,DecodingMode.Attribute)}__name(decodeHTMLAttribute,\"decodeHTMLAttribute\");exports.decodeHTMLAttribute=decodeHTMLAttribute;function decodeHTMLStrict(str){return htmlDecoder(str,DecodingMode.Strict)}__name(decodeHTMLStrict,\"decodeHTMLStrict\");exports.decodeHTMLStrict=decodeHTMLStrict;function decodeXML(str){return xmlDecoder(str,DecodingMode.Strict)}__name(decodeXML,\"decodeXML\");exports.decodeXML=decodeXML;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","EntityDecoder"],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/decode.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importStar(require(\"./decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.replaceCodePoint; } });\nObject.defineProperty(exports, \"fromCodePoint\", { enumerable: true, get: function () { return decode_codepoint_js_2.fromCodePoint; } });\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nvar TO_LOWER_BIT = 32;\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nvar DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nvar EntityDecoder = /** @class */ (function () {\n    function EntityDecoder(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    EntityDecoder.prototype.startEntity = function (decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    };\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param string The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.write = function (str, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (str.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(str, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(str, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(str, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(str, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(str, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(str, offset);\n            }\n        }\n    };\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericStart = function (str, offset) {\n        if (offset >= str.length) {\n            return -1;\n        }\n        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(str, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(str, offset);\n    };\n    EntityDecoder.prototype.addToNumericResult = function (str, start, end, base) {\n        if (start !== end) {\n            var digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    parseInt(str.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    };\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericHex = function (str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n            var char = str.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return -1;\n    };\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNumericDecimal = function (str, offset) {\n        var startIdx = offset;\n        while (offset < str.length) {\n            var char = str.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(str, startIdx, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return -1;\n    };\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    EntityDecoder.prototype.emitNumericEntity = function (lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    };\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param str The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    EntityDecoder.prototype.stateNamedEntity = function (str, offset) {\n        var decodeTree = this.decodeTree;\n        var current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < str.length; offset++, this.excess++) {\n            var char = str.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    };\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.emitNotTerminatedNamedEntity = function () {\n        var _a;\n        var _b = this, result = _b.result, decodeTree = _b.decodeTree;\n        var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    };\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.emitNamedEntityData = function (result, valueLength, consumed) {\n        var decodeTree = this.decodeTree;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    };\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    EntityDecoder.prototype.end = function () {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    };\n    return EntityDecoder;\n}());\nexports.EntityDecoder = EntityDecoder;\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    var ret = \"\";\n    var decoder = new EntityDecoder(decodeTree, function (str) { return (ret += (0, decode_codepoint_js_1.fromCodePoint)(str)); });\n    return function decodeWithTrie(str, decodeMode) {\n        var lastIndex = 0;\n        var offset = 0;\n        while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n            ret += str.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            var len = decoder.write(str, \n            // Skip the \"&\"\n            offset + 1);\n            if (len < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + len;\n            // If `len` is 0, skip the current `&` and continue.\n            offset = len === 0 ? lastIndex + 1 : lastIndex;\n        }\n        var result = ret + str.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        ret = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n    var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        var value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIdx + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    var lo = nodeIdx;\n    var hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        var mid = (lo + hi) >>> 1;\n        var midVal = decodeTree[mid];\n        if (midVal < char) {\n            lo = mid + 1;\n        }\n        else if (midVal > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nfunction decodeHTML(str, mode) {\n    if (mode === void 0) { mode = DecodingMode.Legacy; }\n    return htmlDecoder(str, mode);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLAttribute(str) {\n    return htmlDecoder(str, DecodingMode.Attribute);\n}\nexports.decodeHTMLAttribute = decodeHTMLAttribute;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLStrict(str) {\n    return htmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeXML(str) {\n    return xmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeXML = decodeXML;\n//# sourceMappingURL=decode.js.map"]}}