{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const isTag=__name(node=>{return node.type===\"element\"},\"isTag\");const existsOne=__name((test,elems)=>{return elems.some(elem=>{if(isTag(elem)){return test(elem)||existsOne(test,getChildren(elem))}else{return false}})},\"existsOne\");const getAttributeValue=__name((elem,name)=>{return elem.attributes[name]},\"getAttributeValue\");const getChildren=__name(node=>{return node.children||[]},\"getChildren\");const getName=__name(elemAst=>{return elemAst.name},\"getName\");const getParent=__name(node=>{return node.parentNode||null},\"getParent\");const getSiblings=__name(elem=>{var parent=getParent(elem);return parent?getChildren(parent):[]},\"getSiblings\");const getText=__name(node=>{if(node.children[0].type===\"text\"&&node.children[0].type===\"cdata\"){return node.children[0].value}return\"\"},\"getText\");const hasAttrib=__name((elem,name)=>{return elem.attributes[name]!==void 0},\"hasAttrib\");const removeSubsets=__name(nodes=>{let idx=nodes.length;let node;let ancestor;let replace;while(--idx>-1){node=ancestor=nodes[idx];nodes[idx]=null;replace=true;while(ancestor){if(nodes.includes(ancestor)){replace=false;nodes.splice(idx,1);break}ancestor=getParent(ancestor)}if(replace){nodes[idx]=node}}return nodes},\"removeSubsets\");const findAll=__name((test,elems)=>{const result=[];for(const elem of elems){if(isTag(elem)){if(test(elem)){result.push(elem)}result.push(...findAll(test,getChildren(elem)))}}return result},\"findAll\");const findOne=__name((test,elems)=>{for(const elem of elems){if(isTag(elem)){if(test(elem)){return elem}const result=findOne(test,getChildren(elem));if(result){return result}}}return null},\"findOne\");const svgoCssSelectAdapter={isTag,existsOne,getAttributeValue,getChildren,getName,getParent,getSiblings,getText,hasAttrib,removeSubsets,findAll,findOne};module.exports=svgoCssSelectAdapter;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,MAAM,MAAQ,OAAC,MAAS,CACtB,OAAO,KAAK,OAAS,SACvB,EAFc,SAId,MAAM,UAAY,QAAC,KAAM,QAAU,CACjC,OAAO,MAAM,KAAM,MAAS,CAC1B,GAAI,MAAM,IAAI,EAAG,CACf,OAAO,KAAK,IAAI,GAAK,UAAU,KAAM,YAAY,IAAI,CAAC,CACxD,KAAO,CACL,MAAO,MACT,CACF,CAAC,CACH,EARkB,aAUlB,MAAM,kBAAoB,QAAC,KAAM,OAAS,CACxC,OAAO,KAAK,WAAW,IAAI,CAC7B,EAF0B,qBAI1B,MAAM,YAAc,OAAC,MAAS,CAC5B,OAAO,KAAK,UAAY,CAAC,CAC3B,EAFoB,eAIpB,MAAM,QAAU,OAAC,SAAY,CAC3B,OAAO,QAAQ,IACjB,EAFgB,WAIhB,MAAM,UAAY,OAAC,MAAS,CAC1B,OAAO,KAAK,YAAc,IAC5B,EAFkB,aAIlB,MAAM,YAAc,OAAC,MAAS,CAC5B,IAAI,OAAS,UAAU,IAAI,EAC3B,OAAO,OAAS,YAAY,MAAM,EAAI,CAAC,CACzC,EAHoB,eAKpB,MAAM,QAAU,OAAC,MAAS,CACxB,GAAI,KAAK,SAAS,CAAC,EAAE,OAAS,QAAU,KAAK,SAAS,CAAC,EAAE,OAAS,QAAS,CACzE,OAAO,KAAK,SAAS,CAAC,EAAE,KAC1B,CACA,MAAO,EACT,EALgB,WAOhB,MAAM,UAAY,QAAC,KAAM,OAAS,CAChC,OAAO,KAAK,WAAW,IAAI,IAAM,MACnC,EAFkB,aAIlB,MAAM,cAAgB,OAAC,OAAU,CAC/B,IAAI,IAAM,MAAM,OAChB,IAAI,KACJ,IAAI,SACJ,IAAI,QAGJ,MAAO,EAAE,IAAM,GAAI,CACjB,KAAO,SAAW,MAAM,GAAG,EAE3B,MAAM,GAAG,EAAI,KACb,QAAU,KACV,MAAO,SAAU,CACf,GAAI,MAAM,SAAS,QAAQ,EAAG,CAC5B,QAAU,MACV,MAAM,OAAO,IAAK,CAAC,EACnB,KACF,CACA,SAAW,UAAU,QAAQ,CAC/B,CAEA,GAAI,QAAS,CACX,MAAM,GAAG,EAAI,IACf,CACF,CACA,OAAO,KACT,EA1BsB,iBA4BtB,MAAM,QAAU,QAAC,KAAM,QAAU,CAC/B,MAAM,OAAS,CAAC,EAChB,UAAW,QAAQ,MAAO,CACxB,GAAI,MAAM,IAAI,EAAG,CACf,GAAI,KAAK,IAAI,EAAG,CACd,OAAO,KAAK,IAAI,CAClB,CACA,OAAO,KAAK,GAAG,QAAQ,KAAM,YAAY,IAAI,CAAC,CAAC,CACjD,CACF,CACA,OAAO,MACT,EAXgB,WAahB,MAAM,QAAU,QAAC,KAAM,QAAU,CAC/B,UAAW,QAAQ,MAAO,CACxB,GAAI,MAAM,IAAI,EAAG,CACf,GAAI,KAAK,IAAI,EAAG,CACd,OAAO,IACT,CACA,MAAM,OAAS,QAAQ,KAAM,YAAY,IAAI,CAAC,EAC9C,GAAI,OAAQ,CACV,OAAO,MACT,CACF,CACF,CACA,OAAO,IACT,EAbgB,WAehB,MAAM,qBAAuB,CAC3B,MACA,UACA,kBACA,YACA,QACA,UACA,YACA,QACA,UACA,cACA,QACA,OACF,EAEA,OAAO,QAAU","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/lib/svgo/css-select-adapter.js"],"sourcesContent":["'use strict';\n\nconst isTag = (node) => {\n  return node.type === 'element';\n};\n\nconst existsOne = (test, elems) => {\n  return elems.some((elem) => {\n    if (isTag(elem)) {\n      return test(elem) || existsOne(test, getChildren(elem));\n    } else {\n      return false;\n    }\n  });\n};\n\nconst getAttributeValue = (elem, name) => {\n  return elem.attributes[name];\n};\n\nconst getChildren = (node) => {\n  return node.children || [];\n};\n\nconst getName = (elemAst) => {\n  return elemAst.name;\n};\n\nconst getParent = (node) => {\n  return node.parentNode || null;\n};\n\nconst getSiblings = (elem) => {\n  var parent = getParent(elem);\n  return parent ? getChildren(parent) : [];\n};\n\nconst getText = (node) => {\n  if (node.children[0].type === 'text' && node.children[0].type === 'cdata') {\n    return node.children[0].value;\n  }\n  return '';\n};\n\nconst hasAttrib = (elem, name) => {\n  return elem.attributes[name] !== undefined;\n};\n\nconst removeSubsets = (nodes) => {\n  let idx = nodes.length;\n  let node;\n  let ancestor;\n  let replace;\n  // Check if each node (or one of its ancestors) is already contained in the\n  // array.\n  while (--idx > -1) {\n    node = ancestor = nodes[idx];\n    // Temporarily remove the node under consideration\n    nodes[idx] = null;\n    replace = true;\n    while (ancestor) {\n      if (nodes.includes(ancestor)) {\n        replace = false;\n        nodes.splice(idx, 1);\n        break;\n      }\n      ancestor = getParent(ancestor);\n    }\n    // If the node has been found to be unique, re-insert it.\n    if (replace) {\n      nodes[idx] = node;\n    }\n  }\n  return nodes;\n};\n\nconst findAll = (test, elems) => {\n  const result = [];\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        result.push(elem);\n      }\n      result.push(...findAll(test, getChildren(elem)));\n    }\n  }\n  return result;\n};\n\nconst findOne = (test, elems) => {\n  for (const elem of elems) {\n    if (isTag(elem)) {\n      if (test(elem)) {\n        return elem;\n      }\n      const result = findOne(test, getChildren(elem));\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return null;\n};\n\nconst svgoCssSelectAdapter = {\n  isTag,\n  existsOne,\n  getAttributeValue,\n  getChildren,\n  getName,\n  getParent,\n  getSiblings,\n  getText,\n  hasAttrib,\n  removeSubsets,\n  findAll,\n  findOne,\n};\n\nmodule.exports = svgoCssSelectAdapter;\n"]}}