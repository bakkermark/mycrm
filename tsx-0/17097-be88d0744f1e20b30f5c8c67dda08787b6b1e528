{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});function setup(env){createDebug.debug=createDebug;createDebug.default=createDebug;createDebug.coerce=coerce;createDebug.disable=disable;createDebug.enable=enable;createDebug.enabled=enabled;createDebug.humanize=require(\"ms\");createDebug.destroy=destroy;Object.keys(env).forEach(key=>{createDebug[key]=env[key]});createDebug.names=[];createDebug.skips=[];createDebug.formatters={};function selectColor(namespace){let hash=0;for(let i=0;i<namespace.length;i++){hash=(hash<<5)-hash+namespace.charCodeAt(i);hash|=0}return createDebug.colors[Math.abs(hash)%createDebug.colors.length]}__name(selectColor,\"selectColor\");createDebug.selectColor=selectColor;function createDebug(namespace){let prevTime;let enableOverride=null;let namespacesCache;let enabledCache;function debug(...args){if(!debug.enabled){return}const self=debug;const curr=Number(new Date);const ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;args[0]=createDebug.coerce(args[0]);if(typeof args[0]!==\"string\"){args.unshift(\"%O\")}let index=0;args[0]=args[0].replace(/%([a-zA-Z%])/g,(match,format)=>{if(match===\"%%\"){return\"%\"}index++;const formatter=createDebug.formatters[format];if(typeof formatter===\"function\"){const val=args[index];match=formatter.call(self,val);args.splice(index,1);index--}return match});createDebug.formatArgs.call(self,args);const logFn=self.log||createDebug.log;logFn.apply(self,args)}__name(debug,\"debug\");debug.namespace=namespace;debug.useColors=createDebug.useColors();debug.color=createDebug.selectColor(namespace);debug.extend=extend;debug.destroy=createDebug.destroy;Object.defineProperty(debug,\"enabled\",{enumerable:true,configurable:false,get:()=>{if(enableOverride!==null){return enableOverride}if(namespacesCache!==createDebug.namespaces){namespacesCache=createDebug.namespaces;enabledCache=createDebug.enabled(namespace)}return enabledCache},set:v=>{enableOverride=v}});if(typeof createDebug.init===\"function\"){createDebug.init(debug)}return debug}__name(createDebug,\"createDebug\");function extend(namespace,delimiter){const newDebug=createDebug(this.namespace+(typeof delimiter===\"undefined\"?\":\":delimiter)+namespace);newDebug.log=this.log;return newDebug}__name(extend,\"extend\");function enable(namespaces){createDebug.save(namespaces);createDebug.namespaces=namespaces;createDebug.names=[];createDebug.skips=[];let i;const split=(typeof namespaces===\"string\"?namespaces:\"\").split(/[\\s,]+/);const len=split.length;for(i=0;i<len;i++){if(!split[i]){continue}namespaces=split[i].replace(/\\*/g,\".*?\");if(namespaces[0]===\"-\"){createDebug.skips.push(new RegExp(\"^\"+namespaces.slice(1)+\"$\"))}else{createDebug.names.push(new RegExp(\"^\"+namespaces+\"$\"))}}}__name(enable,\"enable\");function disable(){const namespaces=[...createDebug.names.map(toNamespace),...createDebug.skips.map(toNamespace).map(namespace=>\"-\"+namespace)].join(\",\");createDebug.enable(\"\");return namespaces}__name(disable,\"disable\");function enabled(name){if(name[name.length-1]===\"*\"){return true}let i;let len;for(i=0,len=createDebug.skips.length;i<len;i++){if(createDebug.skips[i].test(name)){return false}}for(i=0,len=createDebug.names.length;i<len;i++){if(createDebug.names[i].test(name)){return true}}return false}__name(enabled,\"enabled\");function toNamespace(regexp){return regexp.toString().substring(2,regexp.toString().length-2).replace(/\\.\\*\\?$/,\"*\")}__name(toNamespace,\"toNamespace\");function coerce(val){if(val instanceof Error){return val.stack||val.message}return val}__name(coerce,\"coerce\");function destroy(){console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\")}__name(destroy,\"destroy\");createDebug.enable(createDebug.load());return createDebug}__name(setup,\"setup\");module.exports=setup;\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js"],"sourcesContent":["\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n"]}}