{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const collections=require(\"./_collections.js\");exports.name=\"convertColors\";exports.description=\"converts colors: rgb() to #rrggbb and #rrggbb to #rgb\";const rNumber=\"([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)\";const rComma=\"\\\\s*,\\\\s*\";const regRGB=new RegExp(\"^rgb\\\\(\\\\s*\"+rNumber+rComma+rNumber+rComma+rNumber+\"\\\\s*\\\\)$\");const regHEX=/^#(([a-fA-F0-9])\\2){3}$/;const convertRgbToHex=__name(([r,g,b])=>{const hexNumber=(256+r<<8|g)<<8|b;return\"#\"+hexNumber.toString(16).slice(1).toUpperCase()},\"convertRgbToHex\");exports.fn=(_root,params)=>{const{currentColor=false,names2hex=true,rgb2hex=true,shorthex=true,shortname=true}=params;return{element:{enter:node=>{for(const[name,value]of Object.entries(node.attributes)){if(collections.colorsProps.includes(name)){let val=value;if(currentColor){let matched;if(typeof currentColor===\"string\"){matched=val===currentColor}else if(currentColor instanceof RegExp){matched=currentColor.exec(val)!=null}else{matched=val!==\"none\"}if(matched){val=\"currentColor\"}}if(names2hex){const colorName=val.toLowerCase();if(collections.colorsNames[colorName]!=null){val=collections.colorsNames[colorName]}}if(rgb2hex){let match=val.match(regRGB);if(match!=null){let nums=match.slice(1,4).map(m=>{let n;if(m.indexOf(\"%\")>-1){n=Math.round(parseFloat(m)*2.55)}else{n=Number(m)}return Math.max(0,Math.min(n,255))});val=convertRgbToHex(nums)}}if(shorthex){let match=val.match(regHEX);if(match!=null){val=\"#\"+match[0][1]+match[0][3]+match[0][5]}}if(shortname){const colorName=val.toLowerCase();if(collections.colorsShortNames[colorName]!=null){val=collections.colorsShortNames[colorName]}}node.attributes[name]=val}}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,MAAM,YAAc,QAAQ,mBAAmB,EAE/C,QAAQ,KAAO,gBACf,QAAQ,YAAc,wDAEtB,MAAM,QAAU,oCAChB,MAAM,OAAS,YACf,MAAM,OAAS,IAAI,OACjB,cAAgB,QAAU,OAAS,QAAU,OAAS,QAAU,UAClE,EACA,MAAM,OAAS,0BAcf,MAAM,gBAAkB,QAAC,CAAC,EAAG,EAAG,CAAC,IAAM,CAErC,MAAM,WAEA,IACF,GACA,EACA,IACA,EACF,EAGF,MAAO,IAAM,UAAU,SAAS,EAAE,EAAE,MAAM,CAAC,EAAE,YAAY,CAC3D,EAbwB,mBAuCxB,QAAQ,GAAK,CAAC,MAAO,SAAW,CAC9B,KAAM,CACJ,aAAe,MACf,UAAY,KACZ,QAAU,KACV,SAAW,KACX,UAAY,IACd,EAAI,OAEJ,MAAO,CACL,QAAS,CACP,MAAQ,MAAS,CACf,SAAW,CAAC,KAAM,KAAK,IAAK,OAAO,QAAQ,KAAK,UAAU,EAAG,CAC3D,GAAI,YAAY,YAAY,SAAS,IAAI,EAAG,CAC1C,IAAI,IAAM,MAGV,GAAI,aAAc,CAChB,IAAI,QACJ,GAAI,OAAO,eAAiB,SAAU,CACpC,QAAU,MAAQ,YACpB,SAAW,wBAAwB,OAAQ,CACzC,QAAU,aAAa,KAAK,GAAG,GAAK,IACtC,KAAO,CACL,QAAU,MAAQ,MACpB,CACA,GAAI,QAAS,CACX,IAAM,cACR,CACF,CAGA,GAAI,UAAW,CACb,MAAM,UAAY,IAAI,YAAY,EAClC,GAAI,YAAY,YAAY,SAAS,GAAK,KAAM,CAC9C,IAAM,YAAY,YAAY,SAAS,CACzC,CACF,CAGA,GAAI,QAAS,CACX,IAAI,MAAQ,IAAI,MAAM,MAAM,EAC5B,GAAI,OAAS,KAAM,CACjB,IAAI,KAAO,MAAM,MAAM,EAAG,CAAC,EAAE,IAAK,GAAM,CACtC,IAAI,EACJ,GAAI,EAAE,QAAQ,GAAG,EAAI,GAAI,CACvB,EAAI,KAAK,MAAM,WAAW,CAAC,EAAI,IAAI,CACrC,KAAO,CACL,EAAI,OAAO,CAAC,CACd,CACA,OAAO,KAAK,IAAI,EAAG,KAAK,IAAI,EAAG,GAAG,CAAC,CACrC,CAAC,EACD,IAAM,gBAAgB,IAAI,CAC5B,CACF,CAGA,GAAI,SAAU,CACZ,IAAI,MAAQ,IAAI,MAAM,MAAM,EAC5B,GAAI,OAAS,KAAM,CACjB,IAAM,IAAM,MAAM,CAAC,EAAE,CAAC,EAAI,MAAM,CAAC,EAAE,CAAC,EAAI,MAAM,CAAC,EAAE,CAAC,CACpD,CACF,CAGA,GAAI,UAAW,CACb,MAAM,UAAY,IAAI,YAAY,EAClC,GAAI,YAAY,iBAAiB,SAAS,GAAK,KAAM,CACnD,IAAM,YAAY,iBAAiB,SAAS,CAC9C,CACF,CAEA,KAAK,WAAW,IAAI,EAAI,GAC1B,CACF,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/convertColors.js"],"sourcesContent":["'use strict';\n\nconst collections = require('./_collections.js');\n\nexports.name = 'convertColors';\nexports.description = 'converts colors: rgb() to #rrggbb and #rrggbb to #rgb';\n\nconst rNumber = '([+-]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)%?)';\nconst rComma = '\\\\s*,\\\\s*';\nconst regRGB = new RegExp(\n  '^rgb\\\\(\\\\s*' + rNumber + rComma + rNumber + rComma + rNumber + '\\\\s*\\\\)$'\n);\nconst regHEX = /^#(([a-fA-F0-9])\\2){3}$/;\n\n/**\n * Convert [r, g, b] to #rrggbb.\n *\n * @see https://gist.github.com/983535\n *\n * @example\n * rgb2hex([255, 255, 255]) // '#ffffff'\n *\n * @author Jed Schmidt\n *\n * @type {(rgb: Array<number>) => string}\n */\nconst convertRgbToHex = ([r, g, b]) => {\n  // combine the octets into a 32-bit integer as: [1][r][g][b]\n  const hexNumber =\n    // operator precedence is (+) > (<<) > (|)\n    ((((256 + // [1][0]\n      r) << // [1][r]\n      8) | // [1][r][0]\n      g) << // [1][r][g]\n      8) | // [1][r][g][0]\n    b;\n  // serialize [1][r][g][b] to a hex string, and\n  // remove the 1 to get the number with 0s intact\n  return '#' + hexNumber.toString(16).slice(1).toUpperCase();\n};\n\n/**\n * Convert different colors formats in element attributes to hex.\n *\n * @see https://www.w3.org/TR/SVG11/types.html#DataTypeColor\n * @see https://www.w3.org/TR/SVG11/single-page.html#types-ColorKeywords\n *\n * @example\n * Convert color name keyword to long hex:\n * fuchsia ➡ #ff00ff\n *\n * Convert rgb() to long hex:\n * rgb(255, 0, 255) ➡ #ff00ff\n * rgb(50%, 100, 100%) ➡ #7f64ff\n *\n * Convert long hex to short hex:\n * #aabbcc ➡ #abc\n *\n * Convert hex to short name\n * #000080 ➡ navy\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'convertColors'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    currentColor = false,\n    names2hex = true,\n    rgb2hex = true,\n    shorthex = true,\n    shortname = true,\n  } = params;\n\n  return {\n    element: {\n      enter: (node) => {\n        for (const [name, value] of Object.entries(node.attributes)) {\n          if (collections.colorsProps.includes(name)) {\n            let val = value;\n\n            // convert colors to currentColor\n            if (currentColor) {\n              let matched;\n              if (typeof currentColor === 'string') {\n                matched = val === currentColor;\n              } else if (currentColor instanceof RegExp) {\n                matched = currentColor.exec(val) != null;\n              } else {\n                matched = val !== 'none';\n              }\n              if (matched) {\n                val = 'currentColor';\n              }\n            }\n\n            // convert color name keyword to long hex\n            if (names2hex) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsNames[colorName] != null) {\n                val = collections.colorsNames[colorName];\n              }\n            }\n\n            // convert rgb() to long hex\n            if (rgb2hex) {\n              let match = val.match(regRGB);\n              if (match != null) {\n                let nums = match.slice(1, 4).map((m) => {\n                  let n;\n                  if (m.indexOf('%') > -1) {\n                    n = Math.round(parseFloat(m) * 2.55);\n                  } else {\n                    n = Number(m);\n                  }\n                  return Math.max(0, Math.min(n, 255));\n                });\n                val = convertRgbToHex(nums);\n              }\n            }\n\n            // convert long hex to short hex\n            if (shorthex) {\n              let match = val.match(regHEX);\n              if (match != null) {\n                val = '#' + match[0][1] + match[0][3] + match[0][5];\n              }\n            }\n\n            // convert hex to short name\n            if (shortname) {\n              const colorName = val.toLowerCase();\n              if (collections.colorsShortNames[colorName] != null) {\n                val = collections.colorsShortNames[colorName];\n              }\n            }\n\n            node.attributes[name] = val;\n          }\n        }\n      },\n    },\n  };\n};\n"]}}