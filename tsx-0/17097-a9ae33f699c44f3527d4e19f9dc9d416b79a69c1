{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const hlo=require(\"./high-level-opt.js\");const r=require(\"./replace.js\");module.exports=(opt_,files,cb)=>{const opt=hlo(opt_);if(!opt.file){throw new TypeError(\"file is required\")}if(opt.gzip||opt.brotli||opt.file.endsWith(\".br\")||opt.file.endsWith(\".tbr\")){throw new TypeError(\"cannot append to compressed archives\")}if(!files||!Array.isArray(files)||!files.length){throw new TypeError(\"no files or directories specified\")}files=Array.from(files);mtimeFilter(opt);return r(opt,files,cb)};const mtimeFilter=__name(opt=>{const filter=opt.filter;if(!opt.mtimeCache){opt.mtimeCache=new Map}opt.filter=filter?(path,stat)=>filter(path,stat)&&!(opt.mtimeCache.get(path)>stat.mtime):(path,stat)=>!(opt.mtimeCache.get(path)>stat.mtime)},\"mtimeFilter\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAIA,MAAM,IAAM,QAAQ,qBAAqB,EACzC,MAAM,EAAI,QAAQ,cAAc,EAGhC,OAAO,QAAU,CAAC,KAAM,MAAO,KAAO,CACpC,MAAM,IAAM,IAAI,IAAI,EAEpB,GAAI,CAAC,IAAI,KAAM,CACb,MAAM,IAAI,UAAU,kBAAkB,CACxC,CAEA,GAAI,IAAI,MAAQ,IAAI,QAAU,IAAI,KAAK,SAAS,KAAK,GAAK,IAAI,KAAK,SAAS,MAAM,EAAG,CACnF,MAAM,IAAI,UAAU,sCAAsC,CAC5D,CAEA,GAAI,CAAC,OAAS,CAAC,MAAM,QAAQ,KAAK,GAAK,CAAC,MAAM,OAAQ,CACpD,MAAM,IAAI,UAAU,mCAAmC,CACzD,CAEA,MAAQ,MAAM,KAAK,KAAK,EAExB,YAAY,GAAG,EACf,OAAO,EAAE,IAAK,MAAO,EAAE,CACzB,EAEA,MAAM,YAAc,YAAO,CACzB,MAAM,OAAS,IAAI,OAEnB,GAAI,CAAC,IAAI,WAAY,CACnB,IAAI,WAAa,IAAI,GACvB,CAEA,IAAI,OAAS,OAAS,CAAC,KAAM,OAC3B,OAAO,KAAM,IAAI,GAAK,EAAE,IAAI,WAAW,IAAI,IAAI,EAAI,KAAK,OACtD,CAAC,KAAM,OAAS,EAAE,IAAI,WAAW,IAAI,IAAI,EAAI,KAAK,MACxD,EAVoB","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/tar@6.2.0/node_modules/tar/lib/update.js"],"sourcesContent":["'use strict'\n\n// tar -u\n\nconst hlo = require('./high-level-opt.js')\nconst r = require('./replace.js')\n// just call tar.r with the filter and mtimeCache\n\nmodule.exports = (opt_, files, cb) => {\n  const opt = hlo(opt_)\n\n  if (!opt.file) {\n    throw new TypeError('file is required')\n  }\n\n  if (opt.gzip || opt.brotli || opt.file.endsWith('.br') || opt.file.endsWith('.tbr')) {\n    throw new TypeError('cannot append to compressed archives')\n  }\n\n  if (!files || !Array.isArray(files) || !files.length) {\n    throw new TypeError('no files or directories specified')\n  }\n\n  files = Array.from(files)\n\n  mtimeFilter(opt)\n  return r(opt, files, cb)\n}\n\nconst mtimeFilter = opt => {\n  const filter = opt.filter\n\n  if (!opt.mtimeCache) {\n    opt.mtimeCache = new Map()\n  }\n\n  opt.filter = filter ? (path, stat) =>\n    filter(path, stat) && !(opt.mtimeCache.get(path) > stat.mtime)\n    : (path, stat) => !(opt.mtimeCache.get(path) > stat.mtime)\n}\n"]}}