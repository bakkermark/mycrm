{"code":"(()=>{\n\"use strict\";const{querySelectorAll}=require(\"../lib/xast.js\");exports.name=\"removeAttributesBySelector\";exports.description=\"removes attributes of elements that match a css selector\";exports.fn=(root,params)=>{const selectors=Array.isArray(params.selectors)?params.selectors:[params];for(const{selector,attributes}of selectors){const nodes=querySelectorAll(root,selector);for(const node of nodes){if(node.type===\"element\"){if(Array.isArray(attributes)){for(const name of attributes){delete node.attributes[name]}}else{delete node.attributes[attributes]}}}}return{}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,KAAM,CAAE,gBAAiB,EAAI,QAAQ,gBAAgB,EAErD,QAAQ,KAAO,6BACf,QAAQ,YACN,2DAuEF,QAAQ,GAAK,CAAC,KAAM,SAAW,CAC7B,MAAM,UAAY,MAAM,QAAQ,OAAO,SAAS,EAC5C,OAAO,UACP,CAAC,MAAM,EACX,SAAW,CAAE,SAAU,UAAW,IAAK,UAAW,CAChD,MAAM,MAAQ,iBAAiB,KAAM,QAAQ,EAC7C,UAAW,QAAQ,MAAO,CACxB,GAAI,KAAK,OAAS,UAAW,CAC3B,GAAI,MAAM,QAAQ,UAAU,EAAG,CAC7B,UAAW,QAAQ,WAAY,CAC7B,OAAO,KAAK,WAAW,IAAI,CAC7B,CACF,KAAO,CACL,OAAO,KAAK,WAAW,UAAU,CACnC,CACF,CACF,CACF,CACA,MAAO,CAAC,CACV","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/removeAttributesBySelector.js"],"sourcesContent":["'use strict';\n\nconst { querySelectorAll } = require('../lib/xast.js');\n\nexports.name = 'removeAttributesBySelector';\nexports.description =\n  'removes attributes of elements that match a css selector';\n\n/**\n * Removes attributes of elements that match a css selector.\n *\n * @example\n * <caption>A selector removing a single attribute</caption>\n * plugins: [\n *   {\n *     name: \"removeAttributesBySelector\",\n *     params: {\n *       selector: \"[fill='#00ff00']\"\n *       attributes: \"fill\"\n *     }\n *   }\n * ]\n *\n * <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"#00ff00\" stroke=\"#00ff00\"/>\n *   ↓\n * <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" stroke=\"#00ff00\"/>\n *\n * <caption>A selector removing multiple attributes</caption>\n * plugins: [\n *   {\n *     name: \"removeAttributesBySelector\",\n *     params: {\n *       selector: \"[fill='#00ff00']\",\n *       attributes: [\n *         \"fill\",\n *         \"stroke\"\n *       ]\n *     }\n *   }\n * ]\n *\n * <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"#00ff00\" stroke=\"#00ff00\"/>\n *   ↓\n * <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/>\n *\n * <caption>Multiple selectors removing attributes</caption>\n * plugins: [\n *   {\n *     name: \"removeAttributesBySelector\",\n *     params: {\n *       selectors: [\n *         {\n *           selector: \"[fill='#00ff00']\",\n *           attributes: \"fill\"\n *         },\n *         {\n *           selector: \"#remove\",\n *           attributes: [\n *             \"stroke\",\n *             \"id\"\n *           ]\n *         }\n *       ]\n *     }\n *   }\n * ]\n *\n * <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" fill=\"#00ff00\" stroke=\"#00ff00\"/>\n *   ↓\n * <rect x=\"0\" y=\"0\" width=\"100\" height=\"100\"/>\n *\n * @link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors|MDN CSS Selectors\n *\n * @author Bradley Mease\n *\n * @type {import('./plugins-types').Plugin<'removeAttributesBySelector'>}\n */\nexports.fn = (root, params) => {\n  const selectors = Array.isArray(params.selectors)\n    ? params.selectors\n    : [params];\n  for (const { selector, attributes } of selectors) {\n    const nodes = querySelectorAll(root, selector);\n    for (const node of nodes) {\n      if (node.type === 'element') {\n        if (Array.isArray(attributes)) {\n          for (const name of attributes) {\n            delete node.attributes[name];\n          }\n        } else {\n          delete node.attributes[attributes];\n        }\n      }\n    }\n  }\n  return {};\n};\n"]}}