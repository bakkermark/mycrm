{"code":"(()=>{\n\"use strict\";const{pathElems,referencesProps}=require(\"./_collections.js\");exports.name=\"moveGroupAttrsToElems\";exports.description=\"moves some group attributes to the content elements\";const pathElemsWithGroupsAndText=[...pathElems,\"g\",\"text\"];exports.fn=()=>{return{element:{enter:node=>{if(node.name===\"g\"&&node.children.length!==0&&node.attributes.transform!=null&&Object.entries(node.attributes).some(([name,value])=>referencesProps.includes(name)&&value.includes(\"url(\"))===false&&node.children.every(child=>child.type===\"element\"&&pathElemsWithGroupsAndText.includes(child.name)&&child.attributes.id==null)){for(const child of node.children){const value=node.attributes.transform;if(child.type===\"element\"){if(child.attributes.transform!=null){child.attributes.transform=`${value} ${child.attributes.transform}`}else{child.attributes.transform=value}}}delete node.attributes.transform}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,KAAM,CAAE,UAAW,eAAgB,EAAI,QAAQ,mBAAmB,EAElE,QAAQ,KAAO,wBACf,QAAQ,YAAc,sDAEtB,MAAM,2BAA6B,CAAC,GAAG,UAAW,IAAK,MAAM,EAoB7D,QAAQ,GAAK,IAAM,CACjB,MAAO,CACL,QAAS,CACP,MAAQ,MAAS,CAEf,GACE,KAAK,OAAS,KACd,KAAK,SAAS,SAAW,GACzB,KAAK,WAAW,WAAa,MAC7B,OAAO,QAAQ,KAAK,UAAU,EAAE,KAC9B,CAAC,CAAC,KAAM,KAAK,IACX,gBAAgB,SAAS,IAAI,GAAK,MAAM,SAAS,MAAM,CAC3D,IAAM,OACN,KAAK,SAAS,MACX,OACC,MAAM,OAAS,WACf,2BAA2B,SAAS,MAAM,IAAI,GAC9C,MAAM,WAAW,IAAM,IAC3B,EACA,CACA,UAAW,SAAS,KAAK,SAAU,CACjC,MAAM,MAAQ,KAAK,WAAW,UAC9B,GAAI,MAAM,OAAS,UAAW,CAC5B,GAAI,MAAM,WAAW,WAAa,KAAM,CACtC,MAAM,WAAW,UAAY,GAAG,KAAK,IAAI,MAAM,WAAW,SAAS,EACrE,KAAO,CACL,MAAM,WAAW,UAAY,KAC/B,CACF,CACF,CAEA,OAAO,KAAK,WAAW,SACzB,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/moveGroupAttrsToElems.js"],"sourcesContent":["'use strict';\n\nconst { pathElems, referencesProps } = require('./_collections.js');\n\nexports.name = 'moveGroupAttrsToElems';\nexports.description = 'moves some group attributes to the content elements';\n\nconst pathElemsWithGroupsAndText = [...pathElems, 'g', 'text'];\n\n/**\n * Move group attrs to the content elements.\n *\n * @example\n * <g transform=\"scale(2)\">\n *     <path transform=\"rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *                          â¬‡\n * <g>\n *     <path transform=\"scale(2) rotate(45)\" d=\"M0,0 L10,20\"/>\n *     <path transform=\"scale(2) translate(10, 20)\" d=\"M0,10 L20,30\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'moveGroupAttrsToElems'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node) => {\n        // move group transform attr to content's pathElems\n        if (\n          node.name === 'g' &&\n          node.children.length !== 0 &&\n          node.attributes.transform != null &&\n          Object.entries(node.attributes).some(\n            ([name, value]) =>\n              referencesProps.includes(name) && value.includes('url(')\n          ) === false &&\n          node.children.every(\n            (child) =>\n              child.type === 'element' &&\n              pathElemsWithGroupsAndText.includes(child.name) &&\n              child.attributes.id == null\n          )\n        ) {\n          for (const child of node.children) {\n            const value = node.attributes.transform;\n            if (child.type === 'element') {\n              if (child.attributes.transform != null) {\n                child.attributes.transform = `${value} ${child.attributes.transform}`;\n              } else {\n                child.attributes.transform = value;\n              }\n            }\n          }\n\n          delete node.attributes.transform;\n        }\n      },\n    },\n  };\n};\n"]}}