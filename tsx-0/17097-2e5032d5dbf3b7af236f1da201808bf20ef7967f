{"code":"(()=>{\n\"use strict\";exports.name=\"sortDefsChildren\";exports.description=\"Sorts children of <defs> to improve compression\";exports.fn=()=>{return{element:{enter:node=>{if(node.name===\"defs\"){const frequencies=new Map;for(const child of node.children){if(child.type===\"element\"){const frequency=frequencies.get(child.name);if(frequency==null){frequencies.set(child.name,1)}else{frequencies.set(child.name,frequency+1)}}}node.children.sort((a,b)=>{if(a.type!==\"element\"||b.type!==\"element\"){return 0}const aFrequency=frequencies.get(a.name);const bFrequency=frequencies.get(b.name);if(aFrequency!=null&&bFrequency!=null){const frequencyComparison=bFrequency-aFrequency;if(frequencyComparison!==0){return frequencyComparison}}const lengthComparison=b.name.length-a.name.length;if(lengthComparison!==0){return lengthComparison}if(a.name!==b.name){return a.name>b.name?-1:1}return 0})}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,QAAQ,KAAO,mBACf,QAAQ,YAAc,kDAUtB,QAAQ,GAAK,IAAM,CACjB,MAAO,CACL,QAAS,CACP,MAAQ,MAAS,CACf,GAAI,KAAK,OAAS,OAAQ,CAIxB,MAAM,YAAc,IAAI,IACxB,UAAW,SAAS,KAAK,SAAU,CACjC,GAAI,MAAM,OAAS,UAAW,CAC5B,MAAM,UAAY,YAAY,IAAI,MAAM,IAAI,EAC5C,GAAI,WAAa,KAAM,CACrB,YAAY,IAAI,MAAM,KAAM,CAAC,CAC/B,KAAO,CACL,YAAY,IAAI,MAAM,KAAM,UAAY,CAAC,CAC3C,CACF,CACF,CACA,KAAK,SAAS,KAAK,CAAC,EAAG,IAAM,CAC3B,GAAI,EAAE,OAAS,WAAa,EAAE,OAAS,UAAW,CAChD,MAAO,EACT,CACA,MAAM,WAAa,YAAY,IAAI,EAAE,IAAI,EACzC,MAAM,WAAa,YAAY,IAAI,EAAE,IAAI,EACzC,GAAI,YAAc,MAAQ,YAAc,KAAM,CAC5C,MAAM,oBAAsB,WAAa,WACzC,GAAI,sBAAwB,EAAG,CAC7B,OAAO,mBACT,CACF,CACA,MAAM,iBAAmB,EAAE,KAAK,OAAS,EAAE,KAAK,OAChD,GAAI,mBAAqB,EAAG,CAC1B,OAAO,gBACT,CACA,GAAI,EAAE,OAAS,EAAE,KAAM,CACrB,OAAO,EAAE,KAAO,EAAE,KAAO,GAAK,CAChC,CACA,MAAO,EACT,CAAC,CACH,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/sortDefsChildren.js"],"sourcesContent":["'use strict';\n\nexports.name = 'sortDefsChildren';\nexports.description = 'Sorts children of <defs> to improve compression';\n\n/**\n * Sorts children of defs in order to improve compression.\n * Sorted first by frequency then by element name length then by element name (to ensure grouping).\n *\n * @author David Leston\n *\n * @type {import('./plugins-types').Plugin<'sortDefsChildren'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node) => {\n        if (node.name === 'defs') {\n          /**\n           * @type {Map<string, number>}\n           */\n          const frequencies = new Map();\n          for (const child of node.children) {\n            if (child.type === 'element') {\n              const frequency = frequencies.get(child.name);\n              if (frequency == null) {\n                frequencies.set(child.name, 1);\n              } else {\n                frequencies.set(child.name, frequency + 1);\n              }\n            }\n          }\n          node.children.sort((a, b) => {\n            if (a.type !== 'element' || b.type !== 'element') {\n              return 0;\n            }\n            const aFrequency = frequencies.get(a.name);\n            const bFrequency = frequencies.get(b.name);\n            if (aFrequency != null && bFrequency != null) {\n              const frequencyComparison = bFrequency - aFrequency;\n              if (frequencyComparison !== 0) {\n                return frequencyComparison;\n              }\n            }\n            const lengthComparison = b.name.length - a.name.length;\n            if (lengthComparison !== 0) {\n              return lengthComparison;\n            }\n            if (a.name !== b.name) {\n              return a.name > b.name ? -1 : 1;\n            }\n            return 0;\n          });\n        }\n      },\n    },\n  };\n};\n"]}}