{"code":"(()=>{\n\"use strict\";const csso=require(\"csso\");const{detachNodeFromParent}=require(\"../lib/xast\");const{hasScripts}=require(\"../lib/svgo/tools\");exports.name=\"minifyStyles\";exports.description=\"minifies styles and removes unused styles\";exports.fn=(_root,{usage,...params})=>{const styleElements=new Map;const elementsWithStyleAttributes=[];const tagsUsage=new Set;const idsUsage=new Set;const classesUsage=new Set;let enableTagsUsage=true;let enableIdsUsage=true;let enableClassesUsage=true;let forceUsageDeoptimized=false;if(typeof usage===\"boolean\"){enableTagsUsage=usage;enableIdsUsage=usage;enableClassesUsage=usage}else if(usage){enableTagsUsage=usage.tags==null?true:usage.tags;enableIdsUsage=usage.ids==null?true:usage.ids;enableClassesUsage=usage.classes==null?true:usage.classes;forceUsageDeoptimized=usage.force==null?false:usage.force}let deoptimized=false;return{element:{enter:(node,parentNode)=>{if(hasScripts(node)){deoptimized=true}tagsUsage.add(node.name);if(node.attributes.id!=null){idsUsage.add(node.attributes.id)}if(node.attributes.class!=null){for(const className of node.attributes.class.split(/\\s+/)){classesUsage.add(className)}}if(node.name===\"style\"&&node.children.length!==0){styleElements.set(node,parentNode)}else if(node.attributes.style!=null){elementsWithStyleAttributes.push(node)}}},root:{exit:()=>{const cssoUsage={};if(!deoptimized||forceUsageDeoptimized){if(enableTagsUsage){cssoUsage.tags=Array.from(tagsUsage)}if(enableIdsUsage){cssoUsage.ids=Array.from(idsUsage)}if(enableClassesUsage){cssoUsage.classes=Array.from(classesUsage)}}for(const[styleNode,styleNodeParent]of styleElements.entries()){if(styleNode.children[0].type===\"text\"||styleNode.children[0].type===\"cdata\"){const cssText=styleNode.children[0].value;const minified=csso.minify(cssText,{...params,usage:cssoUsage}).css;if(minified.length===0){detachNodeFromParent(styleNode,styleNodeParent);continue}if(cssText.indexOf(\">\")>=0||cssText.indexOf(\"<\")>=0){styleNode.children[0].type=\"cdata\";styleNode.children[0].value=minified}else{styleNode.children[0].type=\"text\";styleNode.children[0].value=minified}}}for(const node of elementsWithStyleAttributes){const elemStyle=node.attributes.style;node.attributes.style=csso.minifyBlock(elemStyle,{...params}).css}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAOA,MAAM,KAAO,QAAQ,MAAM,EAC3B,KAAM,CAAE,oBAAqB,EAAI,QAAQ,aAAa,EACtD,KAAM,CAAE,UAAW,EAAI,QAAQ,mBAAmB,EAElD,QAAQ,KAAO,eACf,QAAQ,YAAc,4CAQtB,QAAQ,GAAK,CAAC,MAAO,CAAE,MAAO,GAAG,MAAO,IAAM,CAE5C,MAAM,cAAgB,IAAI,IAG1B,MAAM,4BAA8B,CAAC,EAGrC,MAAM,UAAY,IAAI,IAGtB,MAAM,SAAW,IAAI,IAGrB,MAAM,aAAe,IAAI,IAEzB,IAAI,gBAAkB,KACtB,IAAI,eAAiB,KACrB,IAAI,mBAAqB,KAMzB,IAAI,sBAAwB,MAE5B,GAAI,OAAO,QAAU,UAAW,CAC9B,gBAAkB,MAClB,eAAiB,MACjB,mBAAqB,KACvB,SAAW,MAAO,CAChB,gBAAkB,MAAM,MAAQ,KAAO,KAAO,MAAM,KACpD,eAAiB,MAAM,KAAO,KAAO,KAAO,MAAM,IAClD,mBAAqB,MAAM,SAAW,KAAO,KAAO,MAAM,QAC1D,sBAAwB,MAAM,OAAS,KAAO,MAAQ,MAAM,KAC9D,CAEA,IAAI,YAAc,MAElB,MAAO,CACL,QAAS,CACP,MAAO,CAAC,KAAM,aAAe,CAE3B,GAAI,WAAW,IAAI,EAAG,CACpB,YAAc,IAChB,CAGA,UAAU,IAAI,KAAK,IAAI,EACvB,GAAI,KAAK,WAAW,IAAM,KAAM,CAC9B,SAAS,IAAI,KAAK,WAAW,EAAE,CACjC,CACA,GAAI,KAAK,WAAW,OAAS,KAAM,CACjC,UAAW,aAAa,KAAK,WAAW,MAAM,MAAM,KAAK,EAAG,CAC1D,aAAa,IAAI,SAAS,CAC5B,CACF,CAEA,GAAI,KAAK,OAAS,SAAW,KAAK,SAAS,SAAW,EAAG,CACvD,cAAc,IAAI,KAAM,UAAU,CACpC,SAAW,KAAK,WAAW,OAAS,KAAM,CACxC,4BAA4B,KAAK,IAAI,CACvC,CACF,CACF,EAEA,KAAM,CACJ,KAAM,IAAM,CAEV,MAAM,UAAY,CAAC,EACnB,GAAI,CAAC,aAAe,sBAAuB,CACzC,GAAI,gBAAiB,CACnB,UAAU,KAAO,MAAM,KAAK,SAAS,CACvC,CACA,GAAI,eAAgB,CAClB,UAAU,IAAM,MAAM,KAAK,QAAQ,CACrC,CACA,GAAI,mBAAoB,CACtB,UAAU,QAAU,MAAM,KAAK,YAAY,CAC7C,CACF,CAEA,SAAW,CAAC,UAAW,eAAe,IAAK,cAAc,QAAQ,EAAG,CAClE,GACE,UAAU,SAAS,CAAC,EAAE,OAAS,QAC/B,UAAU,SAAS,CAAC,EAAE,OAAS,QAC/B,CACA,MAAM,QAAU,UAAU,SAAS,CAAC,EAAE,MACtC,MAAM,SAAW,KAAK,OAAO,QAAS,CACpC,GAAG,OACH,MAAO,SACT,CAAC,EAAE,IAEH,GAAI,SAAS,SAAW,EAAG,CACzB,qBAAqB,UAAW,eAAe,EAC/C,QACF,CAIA,GAAI,QAAQ,QAAQ,GAAG,GAAK,GAAK,QAAQ,QAAQ,GAAG,GAAK,EAAG,CAC1D,UAAU,SAAS,CAAC,EAAE,KAAO,QAC7B,UAAU,SAAS,CAAC,EAAE,MAAQ,QAChC,KAAO,CACL,UAAU,SAAS,CAAC,EAAE,KAAO,OAC7B,UAAU,SAAS,CAAC,EAAE,MAAQ,QAChC,CACF,CACF,CAEA,UAAW,QAAQ,4BAA6B,CAE9C,MAAM,UAAY,KAAK,WAAW,MAClC,KAAK,WAAW,MAAQ,KAAK,YAAY,UAAW,CAClD,GAAG,MACL,CAAC,EAAE,GACL,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/minifyStyles.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n * @typedef {import('../lib/types').XastParent} XastParent\n */\n\nconst csso = require('csso');\nconst { detachNodeFromParent } = require('../lib/xast');\nconst { hasScripts } = require('../lib/svgo/tools');\n\nexports.name = 'minifyStyles';\nexports.description = 'minifies styles and removes unused styles';\n\n/**\n * Minifies styles (<style> element + style attribute) using CSSO.\n *\n * @author strarsis <strarsis@gmail.com>\n * @type {import('./plugins-types').Plugin<'minifyStyles'>}\n */\nexports.fn = (_root, { usage, ...params }) => {\n  /** @type {Map<XastElement, XastParent>} */\n  const styleElements = new Map();\n\n  /** @type {Array<XastElement>} */\n  const elementsWithStyleAttributes = [];\n\n  /** @type {Set<string>} */\n  const tagsUsage = new Set();\n\n  /** @type {Set<string>} */\n  const idsUsage = new Set();\n\n  /** @type {Set<string>} */\n  const classesUsage = new Set();\n\n  let enableTagsUsage = true;\n  let enableIdsUsage = true;\n  let enableClassesUsage = true;\n\n  /**\n   * Force to use usage data even if it unsafe. For example, the document\n   * contains scripts or in attributes..\n   */\n  let forceUsageDeoptimized = false;\n\n  if (typeof usage === 'boolean') {\n    enableTagsUsage = usage;\n    enableIdsUsage = usage;\n    enableClassesUsage = usage;\n  } else if (usage) {\n    enableTagsUsage = usage.tags == null ? true : usage.tags;\n    enableIdsUsage = usage.ids == null ? true : usage.ids;\n    enableClassesUsage = usage.classes == null ? true : usage.classes;\n    forceUsageDeoptimized = usage.force == null ? false : usage.force;\n  }\n\n  let deoptimized = false;\n\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // detect deoptimisations\n        if (hasScripts(node)) {\n          deoptimized = true;\n        }\n\n        // collect tags, ids and classes usage\n        tagsUsage.add(node.name);\n        if (node.attributes.id != null) {\n          idsUsage.add(node.attributes.id);\n        }\n        if (node.attributes.class != null) {\n          for (const className of node.attributes.class.split(/\\s+/)) {\n            classesUsage.add(className);\n          }\n        }\n        // collect style elements or elements with style attribute\n        if (node.name === 'style' && node.children.length !== 0) {\n          styleElements.set(node, parentNode);\n        } else if (node.attributes.style != null) {\n          elementsWithStyleAttributes.push(node);\n        }\n      },\n    },\n\n    root: {\n      exit: () => {\n        /** @type {csso.Usage} */\n        const cssoUsage = {};\n        if (!deoptimized || forceUsageDeoptimized) {\n          if (enableTagsUsage) {\n            cssoUsage.tags = Array.from(tagsUsage);\n          }\n          if (enableIdsUsage) {\n            cssoUsage.ids = Array.from(idsUsage);\n          }\n          if (enableClassesUsage) {\n            cssoUsage.classes = Array.from(classesUsage);\n          }\n        }\n        // minify style elements\n        for (const [styleNode, styleNodeParent] of styleElements.entries()) {\n          if (\n            styleNode.children[0].type === 'text' ||\n            styleNode.children[0].type === 'cdata'\n          ) {\n            const cssText = styleNode.children[0].value;\n            const minified = csso.minify(cssText, {\n              ...params,\n              usage: cssoUsage,\n            }).css;\n\n            if (minified.length === 0) {\n              detachNodeFromParent(styleNode, styleNodeParent);\n              continue;\n            }\n\n            // preserve cdata if necessary\n            // TODO split cdata -> text optimisation into separate plugin\n            if (cssText.indexOf('>') >= 0 || cssText.indexOf('<') >= 0) {\n              styleNode.children[0].type = 'cdata';\n              styleNode.children[0].value = minified;\n            } else {\n              styleNode.children[0].type = 'text';\n              styleNode.children[0].value = minified;\n            }\n          }\n        }\n        // minify style attributes\n        for (const node of elementsWithStyleAttributes) {\n          // style attribute\n          const elemStyle = node.attributes.style;\n          node.attributes.style = csso.minifyBlock(elemStyle, {\n            ...params,\n          }).css;\n        }\n      },\n    },\n  };\n};\n"]}}