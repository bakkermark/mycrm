{"code":"(()=>{\n\"use strict\";exports.name=\"removeUnusedNS\";exports.description=\"removes unused namespaces declaration\";exports.fn=()=>{const unusedNamespaces=new Set;return{element:{enter:(node,parentNode)=>{if(node.name===\"svg\"&&parentNode.type===\"root\"){for(const name of Object.keys(node.attributes)){if(name.startsWith(\"xmlns:\")){const local=name.slice(\"xmlns:\".length);unusedNamespaces.add(local)}}}if(unusedNamespaces.size!==0){if(node.name.includes(\":\")){const[ns]=node.name.split(\":\");if(unusedNamespaces.has(ns)){unusedNamespaces.delete(ns)}}for(const name of Object.keys(node.attributes)){if(name.includes(\":\")){const[ns]=name.split(\":\");unusedNamespaces.delete(ns)}}}},exit:(node,parentNode)=>{if(node.name===\"svg\"&&parentNode.type===\"root\"){for(const name of unusedNamespaces){delete node.attributes[`xmlns:${name}`]}}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,QAAQ,KAAO,iBACf,QAAQ,YAAc,wCAUtB,QAAQ,GAAK,IAAM,CAIjB,MAAM,iBAAmB,IAAI,IAC7B,MAAO,CACL,QAAS,CACP,MAAO,CAAC,KAAM,aAAe,CAG3B,GAAI,KAAK,OAAS,OAAS,WAAW,OAAS,OAAQ,CACrD,UAAW,QAAQ,OAAO,KAAK,KAAK,UAAU,EAAG,CAC/C,GAAI,KAAK,WAAW,QAAQ,EAAG,CAC7B,MAAM,MAAQ,KAAK,MAAM,SAAS,MAAM,EACxC,iBAAiB,IAAI,KAAK,CAC5B,CACF,CACF,CACA,GAAI,iBAAiB,OAAS,EAAG,CAE/B,GAAI,KAAK,KAAK,SAAS,GAAG,EAAG,CAC3B,KAAM,CAAC,EAAE,EAAI,KAAK,KAAK,MAAM,GAAG,EAChC,GAAI,iBAAiB,IAAI,EAAE,EAAG,CAC5B,iBAAiB,OAAO,EAAE,CAC5B,CACF,CAEA,UAAW,QAAQ,OAAO,KAAK,KAAK,UAAU,EAAG,CAC/C,GAAI,KAAK,SAAS,GAAG,EAAG,CACtB,KAAM,CAAC,EAAE,EAAI,KAAK,MAAM,GAAG,EAC3B,iBAAiB,OAAO,EAAE,CAC5B,CACF,CACF,CACF,EACA,KAAM,CAAC,KAAM,aAAe,CAE1B,GAAI,KAAK,OAAS,OAAS,WAAW,OAAS,OAAQ,CACrD,UAAW,QAAQ,iBAAkB,CACnC,OAAO,KAAK,WAAW,SAAS,IAAI,EAAE,CACxC,CACF,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/removeUnusedNS.js"],"sourcesContent":["'use strict';\n\nexports.name = 'removeUnusedNS';\nexports.description = 'removes unused namespaces declaration';\n\n/**\n * Remove unused namespaces declaration from svg element\n * which are not used in elements or attributes\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'removeUnusedNS'>}\n */\nexports.fn = () => {\n  /**\n   * @type {Set<string>}\n   */\n  const unusedNamespaces = new Set();\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        // collect all namespaces from svg element\n        // (such as xmlns:xlink=\"http://www.w3.org/1999/xlink\")\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of Object.keys(node.attributes)) {\n            if (name.startsWith('xmlns:')) {\n              const local = name.slice('xmlns:'.length);\n              unusedNamespaces.add(local);\n            }\n          }\n        }\n        if (unusedNamespaces.size !== 0) {\n          // preserve namespace used in nested elements names\n          if (node.name.includes(':')) {\n            const [ns] = node.name.split(':');\n            if (unusedNamespaces.has(ns)) {\n              unusedNamespaces.delete(ns);\n            }\n          }\n          // preserve namespace used in nested elements attributes\n          for (const name of Object.keys(node.attributes)) {\n            if (name.includes(':')) {\n              const [ns] = name.split(':');\n              unusedNamespaces.delete(ns);\n            }\n          }\n        }\n      },\n      exit: (node, parentNode) => {\n        // remove unused namespace attributes from svg element\n        if (node.name === 'svg' && parentNode.type === 'root') {\n          for (const name of unusedNamespaces) {\n            delete node.attributes[`xmlns:${name}`];\n          }\n        }\n      },\n    },\n  };\n};\n"]}}