{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var __importDefault=exports&&exports.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod}};Object.defineProperty(exports,\"__esModule\",{value:true});exports.encodeNonAsciiHTML=exports.encodeHTML=void 0;var encode_html_js_1=__importDefault(require(\"./generated/encode-html.js\"));var escape_js_1=require(\"./escape.js\");var htmlReplacer=/[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;function encodeHTML(data){return encodeHTMLTrieRe(htmlReplacer,data)}__name(encodeHTML,\"encodeHTML\");exports.encodeHTML=encodeHTML;function encodeNonAsciiHTML(data){return encodeHTMLTrieRe(escape_js_1.xmlReplacer,data)}__name(encodeNonAsciiHTML,\"encodeNonAsciiHTML\");exports.encodeNonAsciiHTML=encodeNonAsciiHTML;function encodeHTMLTrieRe(regExp,str){var ret=\"\";var lastIdx=0;var match;while((match=regExp.exec(str))!==null){var i=match.index;ret+=str.substring(lastIdx,i);var char=str.charCodeAt(i);var next=encode_html_js_1.default.get(char);if(typeof next===\"object\"){if(i+1<str.length){var nextChar=str.charCodeAt(i+1);var value=typeof next.n===\"number\"?next.n===nextChar?next.o:void 0:next.n.get(nextChar);if(value!==void 0){ret+=value;lastIdx=regExp.lastIndex+=1;continue}}next=next.v}if(next!==void 0){ret+=next;lastIdx=i+1}else{var cp=(0,escape_js_1.getCodePoint)(str,i);ret+=\"&#x\".concat(cp.toString(16),\";\");lastIdx=regExp.lastIndex+=Number(cp!==char)}}return ret+str.substr(lastIdx)}__name(encodeHTMLTrieRe,\"encodeHTMLTrieRe\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,IAAI,gBAAmB,SAAQ,QAAK,iBAAoB,SAAU,IAAK,CACnE,OAAQ,KAAO,IAAI,WAAc,IAAM,CAAE,UAAW,GAAI,CAC5D,EACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,QAAQ,mBAAqB,QAAQ,WAAa,OAClD,IAAI,iBAAmB,gBAAgB,QAAQ,4BAA4B,CAAC,EAC5E,IAAI,YAAc,QAAQ,aAAa,EACvC,IAAI,aAAe,sCAYnB,SAAS,WAAW,KAAM,CACtB,OAAO,iBAAiB,aAAc,IAAI,CAC9C,CAFS,gCAGT,QAAQ,WAAa,WASrB,SAAS,mBAAmB,KAAM,CAC9B,OAAO,iBAAiB,YAAY,YAAa,IAAI,CACzD,CAFS,gDAGT,QAAQ,mBAAqB,mBAC7B,SAAS,iBAAiB,OAAQ,IAAK,CACnC,IAAI,IAAM,GACV,IAAI,QAAU,EACd,IAAI,MACJ,OAAQ,MAAQ,OAAO,KAAK,GAAG,KAAO,KAAM,CACxC,IAAI,EAAI,MAAM,MACd,KAAO,IAAI,UAAU,QAAS,CAAC,EAC/B,IAAI,KAAO,IAAI,WAAW,CAAC,EAC3B,IAAI,KAAO,iBAAiB,QAAQ,IAAI,IAAI,EAC5C,GAAI,OAAO,OAAS,SAAU,CAE1B,GAAI,EAAI,EAAI,IAAI,OAAQ,CACpB,IAAI,SAAW,IAAI,WAAW,EAAI,CAAC,EACnC,IAAI,MAAQ,OAAO,KAAK,IAAM,SACxB,KAAK,IAAM,SACP,KAAK,EACL,OACJ,KAAK,EAAE,IAAI,QAAQ,EACzB,GAAI,QAAU,OAAW,CACrB,KAAO,MACP,QAAU,OAAO,WAAa,EAC9B,QACJ,CACJ,CACA,KAAO,KAAK,CAChB,CAEA,GAAI,OAAS,OAAW,CACpB,KAAO,KACP,QAAU,EAAI,CAClB,KACK,CACD,IAAI,IAAM,EAAG,YAAY,cAAc,IAAK,CAAC,EAC7C,KAAO,MAAM,OAAO,GAAG,SAAS,EAAE,EAAG,GAAG,EAExC,QAAU,OAAO,WAAa,OAAO,KAAO,IAAI,CACpD,CACJ,CACA,OAAO,IAAM,IAAI,OAAO,OAAO,CACnC,CAvCS","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/entities@4.5.0/node_modules/entities/lib/encode.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeNonAsciiHTML = exports.encodeHTML = void 0;\nvar encode_html_js_1 = __importDefault(require(\"./generated/encode-html.js\"));\nvar escape_js_1 = require(\"./escape.js\");\nvar htmlReplacer = /[\\t\\n!-,./:-@[-`\\f{-}$\\x80-\\uFFFF]/g;\n/**\n * Encodes all characters in the input using HTML entities. This includes\n * characters that are valid ASCII characters in HTML documents, such as `#`.\n *\n * To get a more compact output, consider using the `encodeNonAsciiHTML`\n * function, which will only encode characters that are not valid in HTML\n * documents, as well as non-ASCII characters.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nfunction encodeHTML(data) {\n    return encodeHTMLTrieRe(htmlReplacer, data);\n}\nexports.encodeHTML = encodeHTML;\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities. This function will not encode characters that\n * are valid in HTML documents, such as `#`.\n *\n * If a character has no equivalent entity, a numeric hexadecimal reference\n * (eg. `&#xfc;`) will be used.\n */\nfunction encodeNonAsciiHTML(data) {\n    return encodeHTMLTrieRe(escape_js_1.xmlReplacer, data);\n}\nexports.encodeNonAsciiHTML = encodeNonAsciiHTML;\nfunction encodeHTMLTrieRe(regExp, str) {\n    var ret = \"\";\n    var lastIdx = 0;\n    var match;\n    while ((match = regExp.exec(str)) !== null) {\n        var i = match.index;\n        ret += str.substring(lastIdx, i);\n        var char = str.charCodeAt(i);\n        var next = encode_html_js_1.default.get(char);\n        if (typeof next === \"object\") {\n            // We are in a branch. Try to match the next char.\n            if (i + 1 < str.length) {\n                var nextChar = str.charCodeAt(i + 1);\n                var value = typeof next.n === \"number\"\n                    ? next.n === nextChar\n                        ? next.o\n                        : undefined\n                    : next.n.get(nextChar);\n                if (value !== undefined) {\n                    ret += value;\n                    lastIdx = regExp.lastIndex += 1;\n                    continue;\n                }\n            }\n            next = next.v;\n        }\n        // We might have a tree node without a value; skip and use a numeric entity.\n        if (next !== undefined) {\n            ret += next;\n            lastIdx = i + 1;\n        }\n        else {\n            var cp = (0, escape_js_1.getCodePoint)(str, i);\n            ret += \"&#x\".concat(cp.toString(16), \";\");\n            // Increase by 1 if we have a surrogate pair\n            lastIdx = regExp.lastIndex += Number(cp !== char);\n        }\n    }\n    return ret + str.substr(lastIdx);\n}\n//# sourceMappingURL=encode.js.map"]}}