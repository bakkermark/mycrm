{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});exports.name=\"sortAttrs\";exports.description=\"Sort element attributes for better compression\";exports.fn=(_root,params)=>{const{order=[\"id\",\"width\",\"height\",\"x\",\"x1\",\"x2\",\"y\",\"y1\",\"y2\",\"cx\",\"cy\",\"r\",\"fill\",\"stroke\",\"marker\",\"d\",\"points\"],xmlnsOrder=\"front\"}=params;const getNsPriority=__name(name=>{if(xmlnsOrder===\"front\"){if(name===\"xmlns\"){return 3}if(name.startsWith(\"xmlns:\")){return 2}}if(name.includes(\":\")){return 1}return 0},\"getNsPriority\");const compareAttrs=__name(([aName],[bName])=>{const aPriority=getNsPriority(aName);const bPriority=getNsPriority(bName);const priorityNs=bPriority-aPriority;if(priorityNs!==0){return priorityNs}const[aPart]=aName.split(\"-\");const[bPart]=bName.split(\"-\");if(aPart!==bPart){const aInOrderFlag=order.includes(aPart)?1:0;const bInOrderFlag=order.includes(bPart)?1:0;if(aInOrderFlag===1&&bInOrderFlag===1){return order.indexOf(aPart)-order.indexOf(bPart)}const priorityOrder=bInOrderFlag-aInOrderFlag;if(priorityOrder!==0){return priorityOrder}}return aName<bName?-1:1},\"compareAttrs\");return{element:{enter:node=>{const attrs=Object.entries(node.attributes);attrs.sort(compareAttrs);const sortedAttributes={};for(const[name,value]of attrs){sortedAttributes[name]=value}node.attributes=sortedAttributes}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,QAAQ,KAAO,YACf,QAAQ,YAAc,iDAStB,QAAQ,GAAK,CAAC,MAAO,SAAW,CAC9B,KAAM,CACJ,MAAQ,CACN,KACA,QACA,SACA,IACA,KACA,KACA,IACA,KACA,KACA,KACA,KACA,IACA,OACA,SACA,SACA,IACA,QACF,EACA,WAAa,OACf,EAAI,OAKJ,MAAM,cAAgB,OAAC,MAAS,CAC9B,GAAI,aAAe,QAAS,CAE1B,GAAI,OAAS,QAAS,CACpB,MAAO,EACT,CAEA,GAAI,KAAK,WAAW,QAAQ,EAAG,CAC7B,MAAO,EACT,CACF,CAEA,GAAI,KAAK,SAAS,GAAG,EAAG,CACtB,MAAO,EACT,CAEA,MAAO,EACT,EAjBsB,iBAsBtB,MAAM,aAAe,QAAC,CAAC,KAAK,EAAG,CAAC,KAAK,IAAM,CAEzC,MAAM,UAAY,cAAc,KAAK,EACrC,MAAM,UAAY,cAAc,KAAK,EACrC,MAAM,WAAa,UAAY,UAC/B,GAAI,aAAe,EAAG,CACpB,OAAO,UACT,CAGA,KAAM,CAAC,KAAK,EAAI,MAAM,MAAM,GAAG,EAC/B,KAAM,CAAC,KAAK,EAAI,MAAM,MAAM,GAAG,EAE/B,GAAI,QAAU,MAAO,CACnB,MAAM,aAAe,MAAM,SAAS,KAAK,EAAI,EAAI,EACjD,MAAM,aAAe,MAAM,SAAS,KAAK,EAAI,EAAI,EAEjD,GAAI,eAAiB,GAAK,eAAiB,EAAG,CAC5C,OAAO,MAAM,QAAQ,KAAK,EAAI,MAAM,QAAQ,KAAK,CACnD,CAEA,MAAM,cAAgB,aAAe,aACrC,GAAI,gBAAkB,EAAG,CACvB,OAAO,aACT,CACF,CAEA,OAAO,MAAQ,MAAQ,GAAK,CAC9B,EA5BqB,gBA8BrB,MAAO,CACL,QAAS,CACP,MAAQ,MAAS,CACf,MAAM,MAAQ,OAAO,QAAQ,KAAK,UAAU,EAC5C,MAAM,KAAK,YAAY,EAIvB,MAAM,iBAAmB,CAAC,EAC1B,SAAW,CAAC,KAAM,KAAK,IAAK,MAAO,CACjC,iBAAiB,IAAI,EAAI,KAC3B,CACA,KAAK,WAAa,gBACpB,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/sortAttrs.js"],"sourcesContent":["'use strict';\n\nexports.name = 'sortAttrs';\nexports.description = 'Sort element attributes for better compression';\n\n/**\n * Sort element attributes for better compression\n *\n * @author Nikolay Frantsev\n *\n * @type {import('./plugins-types').Plugin<'sortAttrs'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    order = [\n      'id',\n      'width',\n      'height',\n      'x',\n      'x1',\n      'x2',\n      'y',\n      'y1',\n      'y2',\n      'cx',\n      'cy',\n      'r',\n      'fill',\n      'stroke',\n      'marker',\n      'd',\n      'points',\n    ],\n    xmlnsOrder = 'front',\n  } = params;\n\n  /**\n   * @type {(name: string) => number}\n   */\n  const getNsPriority = (name) => {\n    if (xmlnsOrder === 'front') {\n      // put xmlns first\n      if (name === 'xmlns') {\n        return 3;\n      }\n      // xmlns:* attributes second\n      if (name.startsWith('xmlns:')) {\n        return 2;\n      }\n    }\n    // other namespaces after and sort them alphabetically\n    if (name.includes(':')) {\n      return 1;\n    }\n    // other attributes\n    return 0;\n  };\n\n  /**\n   * @type {(a: [string, string], b: [string, string]) => number}\n   */\n  const compareAttrs = ([aName], [bName]) => {\n    // sort namespaces\n    const aPriority = getNsPriority(aName);\n    const bPriority = getNsPriority(bName);\n    const priorityNs = bPriority - aPriority;\n    if (priorityNs !== 0) {\n      return priorityNs;\n    }\n    // extract the first part from attributes\n    // for example \"fill\" from \"fill\" and \"fill-opacity\"\n    const [aPart] = aName.split('-');\n    const [bPart] = bName.split('-');\n    // rely on alphabetical sort when the first part is the same\n    if (aPart !== bPart) {\n      const aInOrderFlag = order.includes(aPart) ? 1 : 0;\n      const bInOrderFlag = order.includes(bPart) ? 1 : 0;\n      // sort by position in order param\n      if (aInOrderFlag === 1 && bInOrderFlag === 1) {\n        return order.indexOf(aPart) - order.indexOf(bPart);\n      }\n      // put attributes from order param before others\n      const priorityOrder = bInOrderFlag - aInOrderFlag;\n      if (priorityOrder !== 0) {\n        return priorityOrder;\n      }\n    }\n    // sort alphabetically\n    return aName < bName ? -1 : 1;\n  };\n\n  return {\n    element: {\n      enter: (node) => {\n        const attrs = Object.entries(node.attributes);\n        attrs.sort(compareAttrs);\n        /**\n         * @type {Record<string, string>}\n         */\n        const sortedAttributes = {};\n        for (const [name, value] of attrs) {\n          sortedAttributes[name] = value;\n        }\n        node.attributes = sortedAttributes;\n      },\n    },\n  };\n};\n"]}}