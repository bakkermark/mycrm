{"code":"(()=>{\n\"use strict\";exports.name=new Map([[\"0\",\"File\"],[\"\",\"OldFile\"],[\"1\",\"Link\"],[\"2\",\"SymbolicLink\"],[\"3\",\"CharacterDevice\"],[\"4\",\"BlockDevice\"],[\"5\",\"Directory\"],[\"6\",\"FIFO\"],[\"7\",\"ContiguousFile\"],[\"g\",\"GlobalExtendedHeader\"],[\"x\",\"ExtendedHeader\"],[\"A\",\"SolarisACL\"],[\"D\",\"GNUDumpDir\"],[\"I\",\"Inode\"],[\"K\",\"NextFileHasLongLinkpath\"],[\"L\",\"NextFileHasLongPath\"],[\"M\",\"ContinuationFile\"],[\"N\",\"OldGnuLongPath\"],[\"S\",\"SparseFile\"],[\"V\",\"TapeVolumeHeader\"],[\"X\",\"OldExtendedHeader\"]]);exports.code=new Map(Array.from(exports.name).map(kv=>[kv[1],kv[0]]));\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,QAAQ,KAAO,IAAI,IAAI,CACrB,CAAC,IAAK,MAAM,EAEZ,CAAC,GAAI,SAAS,EACd,CAAC,IAAK,MAAM,EACZ,CAAC,IAAK,cAAc,EAGpB,CAAC,IAAK,iBAAiB,EACvB,CAAC,IAAK,aAAa,EACnB,CAAC,IAAK,WAAW,EACjB,CAAC,IAAK,MAAM,EAEZ,CAAC,IAAK,gBAAgB,EAEtB,CAAC,IAAK,sBAAsB,EAC5B,CAAC,IAAK,gBAAgB,EAGtB,CAAC,IAAK,YAAY,EAElB,CAAC,IAAK,YAAY,EAElB,CAAC,IAAK,OAAO,EAEb,CAAC,IAAK,yBAAyB,EAE/B,CAAC,IAAK,qBAAqB,EAE3B,CAAC,IAAK,kBAAkB,EAExB,CAAC,IAAK,gBAAgB,EAEtB,CAAC,IAAK,YAAY,EAElB,CAAC,IAAK,kBAAkB,EAExB,CAAC,IAAK,mBAAmB,CAC3B,CAAC,EAGD,QAAQ,KAAO,IAAI,IAAI,MAAM,KAAK,QAAQ,IAAI,EAAE,IAAI,IAAM,CAAC,GAAG,CAAC,EAAG,GAAG,CAAC,CAAC,CAAC,CAAC","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/tar@6.2.0/node_modules/tar/lib/types.js"],"sourcesContent":["'use strict'\n// map types from key to human-friendly name\nexports.name = new Map([\n  ['0', 'File'],\n  // same as File\n  ['', 'OldFile'],\n  ['1', 'Link'],\n  ['2', 'SymbolicLink'],\n  // Devices and FIFOs aren't fully supported\n  // they are parsed, but skipped when unpacking\n  ['3', 'CharacterDevice'],\n  ['4', 'BlockDevice'],\n  ['5', 'Directory'],\n  ['6', 'FIFO'],\n  // same as File\n  ['7', 'ContiguousFile'],\n  // pax headers\n  ['g', 'GlobalExtendedHeader'],\n  ['x', 'ExtendedHeader'],\n  // vendor-specific stuff\n  // skip\n  ['A', 'SolarisACL'],\n  // like 5, but with data, which should be skipped\n  ['D', 'GNUDumpDir'],\n  // metadata only, skip\n  ['I', 'Inode'],\n  // data = link path of next file\n  ['K', 'NextFileHasLongLinkpath'],\n  // data = path of next file\n  ['L', 'NextFileHasLongPath'],\n  // skip\n  ['M', 'ContinuationFile'],\n  // like L\n  ['N', 'OldGnuLongPath'],\n  // skip\n  ['S', 'SparseFile'],\n  // skip\n  ['V', 'TapeVolumeHeader'],\n  // like x\n  ['X', 'OldExtendedHeader'],\n])\n\n// map the other direction\nexports.code = new Map(Array.from(exports.name).map(kv => [kv[1], kv[0]]))\n"]}}