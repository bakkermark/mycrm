{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{removeLeadingZero}=require(\"../lib/svgo/tools.js\");exports.name=\"cleanupListOfValues\";exports.description=\"rounds list of values to the fixed precision\";const regNumericValues=/^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;const regSeparator=/\\s+,?\\s*|,\\s*/;const absoluteLengths={cm:96/2.54,mm:96/25.4,in:96,pt:4/3,pc:16,px:1};exports.fn=(_root,params)=>{const{floatPrecision=3,leadingZero=true,defaultPx=true,convertToPx=true}=params;const roundValues=__name(lists=>{const roundedList=[];for(const elem of lists.split(regSeparator)){const match=elem.match(regNumericValues);const matchNew=elem.match(/new/);if(match){let num=Number(Number(match[1]).toFixed(floatPrecision));let matchedUnit=match[3]||\"\";let units=matchedUnit;if(convertToPx&&units&&units in absoluteLengths){const pxNum=Number((absoluteLengths[units]*Number(match[1])).toFixed(floatPrecision));if(pxNum.toString().length<match[0].length){num=pxNum;units=\"px\"}}let str;if(leadingZero){str=removeLeadingZero(num)}else{str=num.toString()}if(defaultPx&&units===\"px\"){units=\"\"}roundedList.push(str+units)}else if(matchNew){roundedList.push(\"new\")}else if(elem){roundedList.push(elem)}}return roundedList.join(\" \")},\"roundValues\");return{element:{enter:node=>{if(node.attributes.points!=null){node.attributes.points=roundValues(node.attributes.points)}if(node.attributes[\"enable-background\"]!=null){node.attributes[\"enable-background\"]=roundValues(node.attributes[\"enable-background\"])}if(node.attributes.viewBox!=null){node.attributes.viewBox=roundValues(node.attributes.viewBox)}if(node.attributes[\"stroke-dasharray\"]!=null){node.attributes[\"stroke-dasharray\"]=roundValues(node.attributes[\"stroke-dasharray\"])}if(node.attributes.dx!=null){node.attributes.dx=roundValues(node.attributes.dx)}if(node.attributes.dy!=null){node.attributes.dy=roundValues(node.attributes.dy)}if(node.attributes.x!=null){node.attributes.x=roundValues(node.attributes.x)}if(node.attributes.y!=null){node.attributes.y=roundValues(node.attributes.y)}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,KAAM,CAAE,iBAAkB,EAAI,QAAQ,sBAAsB,EAE5D,QAAQ,KAAO,sBACf,QAAQ,YAAc,+CAEtB,MAAM,iBACJ,qEACF,MAAM,aAAe,gBACrB,MAAM,gBAAkB,CAEtB,GAAI,GAAK,KACT,GAAI,GAAK,KACT,GAAI,GACJ,GAAI,EAAI,EACR,GAAI,GACJ,GAAI,CACN,EAkBA,QAAQ,GAAK,CAAC,MAAO,SAAW,CAC9B,KAAM,CACJ,eAAiB,EACjB,YAAc,KACd,UAAY,KACZ,YAAc,IAChB,EAAI,OAKJ,MAAM,YAAc,OAAC,OAAU,CAC7B,MAAM,YAAc,CAAC,EAErB,UAAW,QAAQ,MAAM,MAAM,YAAY,EAAG,CAC5C,MAAM,MAAQ,KAAK,MAAM,gBAAgB,EACzC,MAAM,SAAW,KAAK,MAAM,KAAK,EAGjC,GAAI,MAAO,CAET,IAAI,IAAM,OAAO,OAAO,MAAM,CAAC,CAAC,EAAE,QAAQ,cAAc,CAAC,EAIzD,IAAI,YAAc,MAAM,CAAC,GAAK,GAI9B,IAAI,MAAQ,YAGZ,GAAI,aAAe,OAAS,SAAS,gBAAiB,CACpD,MAAM,MAAQ,QACX,gBAAgB,KAAK,EAAI,OAAO,MAAM,CAAC,CAAC,GAAG,QAAQ,cAAc,CACpE,EAEA,GAAI,MAAM,SAAS,EAAE,OAAS,MAAM,CAAC,EAAE,OAAQ,CAC7C,IAAM,MACN,MAAQ,IACV,CACF,CAGA,IAAI,IACJ,GAAI,YAAa,CACf,IAAM,kBAAkB,GAAG,CAC7B,KAAO,CACL,IAAM,IAAI,SAAS,CACrB,CAGA,GAAI,WAAa,QAAU,KAAM,CAC/B,MAAQ,EACV,CAEA,YAAY,KAAK,IAAM,KAAK,CAC9B,SAES,SAAU,CACjB,YAAY,KAAK,KAAK,CACxB,SAAW,KAAM,CACf,YAAY,KAAK,IAAI,CACvB,CACF,CAEA,OAAO,YAAY,KAAK,GAAG,CAC7B,EAxDoB,eA0DpB,MAAO,CACL,QAAS,CACP,MAAQ,MAAS,CACf,GAAI,KAAK,WAAW,QAAU,KAAM,CAClC,KAAK,WAAW,OAAS,YAAY,KAAK,WAAW,MAAM,CAC7D,CAEA,GAAI,KAAK,WAAW,mBAAmB,GAAK,KAAM,CAChD,KAAK,WAAW,mBAAmB,EAAI,YACrC,KAAK,WAAW,mBAAmB,CACrC,CACF,CAEA,GAAI,KAAK,WAAW,SAAW,KAAM,CACnC,KAAK,WAAW,QAAU,YAAY,KAAK,WAAW,OAAO,CAC/D,CAEA,GAAI,KAAK,WAAW,kBAAkB,GAAK,KAAM,CAC/C,KAAK,WAAW,kBAAkB,EAAI,YACpC,KAAK,WAAW,kBAAkB,CACpC,CACF,CAEA,GAAI,KAAK,WAAW,IAAM,KAAM,CAC9B,KAAK,WAAW,GAAK,YAAY,KAAK,WAAW,EAAE,CACrD,CAEA,GAAI,KAAK,WAAW,IAAM,KAAM,CAC9B,KAAK,WAAW,GAAK,YAAY,KAAK,WAAW,EAAE,CACrD,CAEA,GAAI,KAAK,WAAW,GAAK,KAAM,CAC7B,KAAK,WAAW,EAAI,YAAY,KAAK,WAAW,CAAC,CACnD,CAEA,GAAI,KAAK,WAAW,GAAK,KAAM,CAC7B,KAAK,WAAW,EAAI,YAAY,KAAK,WAAW,CAAC,CACnD,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/cleanupListOfValues.js"],"sourcesContent":["'use strict';\n\nconst { removeLeadingZero } = require('../lib/svgo/tools.js');\n\nexports.name = 'cleanupListOfValues';\nexports.description = 'rounds list of values to the fixed precision';\n\nconst regNumericValues =\n  /^([-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?)(px|pt|pc|mm|cm|m|in|ft|em|ex|%)?$/;\nconst regSeparator = /\\s+,?\\s*|,\\s*/;\nconst absoluteLengths = {\n  // relative to px\n  cm: 96 / 2.54,\n  mm: 96 / 25.4,\n  in: 96,\n  pt: 4 / 3,\n  pc: 16,\n  px: 1,\n};\n\n/**\n * Round list of values to the fixed precision.\n *\n * @example\n * <svg viewBox=\"0 0 200.28423 200.28423\" enable-background=\"new 0 0 200.28423 200.28423\">\n *         ⬇\n * <svg viewBox=\"0 0 200.284 200.284\" enable-background=\"new 0 0 200.284 200.284\">\n *\n * <polygon points=\"208.250977 77.1308594 223.069336 ... \"/>\n *         ⬇\n * <polygon points=\"208.251 77.131 223.069 ... \"/>\n *\n * @author kiyopikko\n *\n * @type {import('./plugins-types').Plugin<'cleanupListOfValues'>}\n */\nexports.fn = (_root, params) => {\n  const {\n    floatPrecision = 3,\n    leadingZero = true,\n    defaultPx = true,\n    convertToPx = true,\n  } = params;\n\n  /**\n   * @type {(lists: string) => string}\n   */\n  const roundValues = (lists) => {\n    const roundedList = [];\n\n    for (const elem of lists.split(regSeparator)) {\n      const match = elem.match(regNumericValues);\n      const matchNew = elem.match(/new/);\n\n      // if attribute value matches regNumericValues\n      if (match) {\n        // round it to the fixed precision\n        let num = Number(Number(match[1]).toFixed(floatPrecision));\n        /**\n         * @type {any}\n         */\n        let matchedUnit = match[3] || '';\n        /**\n         * @type{'' | keyof typeof absoluteLengths}\n         */\n        let units = matchedUnit;\n\n        // convert absolute values to pixels\n        if (convertToPx && units && units in absoluteLengths) {\n          const pxNum = Number(\n            (absoluteLengths[units] * Number(match[1])).toFixed(floatPrecision)\n          );\n\n          if (pxNum.toString().length < match[0].length) {\n            num = pxNum;\n            units = 'px';\n          }\n        }\n\n        // and remove leading zero\n        let str;\n        if (leadingZero) {\n          str = removeLeadingZero(num);\n        } else {\n          str = num.toString();\n        }\n\n        // remove default 'px' units\n        if (defaultPx && units === 'px') {\n          units = '';\n        }\n\n        roundedList.push(str + units);\n      }\n      // if attribute value is \"new\"(only enable-background).\n      else if (matchNew) {\n        roundedList.push('new');\n      } else if (elem) {\n        roundedList.push(elem);\n      }\n    }\n\n    return roundedList.join(' ');\n  };\n\n  return {\n    element: {\n      enter: (node) => {\n        if (node.attributes.points != null) {\n          node.attributes.points = roundValues(node.attributes.points);\n        }\n\n        if (node.attributes['enable-background'] != null) {\n          node.attributes['enable-background'] = roundValues(\n            node.attributes['enable-background']\n          );\n        }\n\n        if (node.attributes.viewBox != null) {\n          node.attributes.viewBox = roundValues(node.attributes.viewBox);\n        }\n\n        if (node.attributes['stroke-dasharray'] != null) {\n          node.attributes['stroke-dasharray'] = roundValues(\n            node.attributes['stroke-dasharray']\n          );\n        }\n\n        if (node.attributes.dx != null) {\n          node.attributes.dx = roundValues(node.attributes.dx);\n        }\n\n        if (node.attributes.dy != null) {\n          node.attributes.dy = roundValues(node.attributes.dy);\n        }\n\n        if (node.attributes.x != null) {\n          node.attributes.x = roundValues(node.attributes.x);\n        }\n\n        if (node.attributes.y != null) {\n          node.attributes.y = roundValues(node.attributes.y);\n        }\n      },\n    },\n  };\n};\n"]}}