{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});var __importDefault=exports&&exports.__importDefault||function(mod){return mod&&mod.__esModule?mod:{\"default\":mod}};Object.defineProperty(exports,\"__esModule\",{value:true});exports.innerText=exports.textContent=exports.getText=exports.getInnerHTML=exports.getOuterHTML=void 0;var domhandler_1=require(\"domhandler\");var dom_serializer_1=__importDefault(require(\"dom-serializer\"));var domelementtype_1=require(\"domelementtype\");function getOuterHTML(node,options){return(0,dom_serializer_1.default)(node,options)}__name(getOuterHTML,\"getOuterHTML\");exports.getOuterHTML=getOuterHTML;function getInnerHTML(node,options){return(0,domhandler_1.hasChildren)(node)?node.children.map(function(node2){return getOuterHTML(node2,options)}).join(\"\"):\"\"}__name(getInnerHTML,\"getInnerHTML\");exports.getInnerHTML=getInnerHTML;function getText(node){if(Array.isArray(node))return node.map(getText).join(\"\");if((0,domhandler_1.isTag)(node))return node.name===\"br\"?\"\\n\":getText(node.children);if((0,domhandler_1.isCDATA)(node))return getText(node.children);if((0,domhandler_1.isText)(node))return node.data;return\"\"}__name(getText,\"getText\");exports.getText=getText;function textContent(node){if(Array.isArray(node))return node.map(textContent).join(\"\");if((0,domhandler_1.hasChildren)(node)&&!(0,domhandler_1.isComment)(node)){return textContent(node.children)}if((0,domhandler_1.isText)(node))return node.data;return\"\"}__name(textContent,\"textContent\");exports.textContent=textContent;function innerText(node){if(Array.isArray(node))return node.map(innerText).join(\"\");if((0,domhandler_1.hasChildren)(node)&&(node.type===domelementtype_1.ElementType.Tag||(0,domhandler_1.isCDATA)(node))){return innerText(node.children)}if((0,domhandler_1.isText)(node))return node.data;return\"\"}__name(innerText,\"innerText\");exports.innerText=innerText;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HACA,IAAI,gBAAmB,SAAQ,QAAK,iBAAoB,SAAU,IAAK,CACnE,OAAQ,KAAO,IAAI,WAAc,IAAM,CAAE,UAAW,GAAI,CAC5D,EACA,OAAO,eAAe,QAAS,aAAc,CAAE,MAAO,IAAK,CAAC,EAC5D,QAAQ,UAAY,QAAQ,YAAc,QAAQ,QAAU,QAAQ,aAAe,QAAQ,aAAe,OAC1G,IAAI,aAAe,QAAQ,YAAY,EACvC,IAAI,iBAAmB,gBAAgB,QAAQ,gBAAgB,CAAC,EAChE,IAAI,iBAAmB,QAAQ,gBAAgB,EAQ/C,SAAS,aAAa,KAAM,QAAS,CACjC,OAAQ,EAAG,iBAAiB,SAAS,KAAM,OAAO,CACtD,CAFS,oCAGT,QAAQ,aAAe,aAQvB,SAAS,aAAa,KAAM,QAAS,CACjC,OAAQ,EAAG,aAAa,aAAa,IAAI,EACnC,KAAK,SAAS,IAAI,SAAUA,MAAM,CAAE,OAAO,aAAaA,MAAM,OAAO,CAAG,CAAC,EAAE,KAAK,EAAE,EAClF,EACV,CAJS,oCAKT,QAAQ,aAAe,aASvB,SAAS,QAAQ,KAAM,CACnB,GAAI,MAAM,QAAQ,IAAI,EAClB,OAAO,KAAK,IAAI,OAAO,EAAE,KAAK,EAAE,EACpC,IAAK,EAAG,aAAa,OAAO,IAAI,EAC5B,OAAO,KAAK,OAAS,KAAO,KAAO,QAAQ,KAAK,QAAQ,EAC5D,IAAK,EAAG,aAAa,SAAS,IAAI,EAC9B,OAAO,QAAQ,KAAK,QAAQ,EAChC,IAAK,EAAG,aAAa,QAAQ,IAAI,EAC7B,OAAO,KAAK,KAChB,MAAO,EACX,CAVS,0BAWT,QAAQ,QAAU,QASlB,SAAS,YAAY,KAAM,CACvB,GAAI,MAAM,QAAQ,IAAI,EAClB,OAAO,KAAK,IAAI,WAAW,EAAE,KAAK,EAAE,EACxC,IAAK,EAAG,aAAa,aAAa,IAAI,GAAK,EAAE,EAAG,aAAa,WAAW,IAAI,EAAG,CAC3E,OAAO,YAAY,KAAK,QAAQ,CACpC,CACA,IAAK,EAAG,aAAa,QAAQ,IAAI,EAC7B,OAAO,KAAK,KAChB,MAAO,EACX,CATS,kCAUT,QAAQ,YAAc,YAStB,SAAS,UAAU,KAAM,CACrB,GAAI,MAAM,QAAQ,IAAI,EAClB,OAAO,KAAK,IAAI,SAAS,EAAE,KAAK,EAAE,EACtC,IAAK,EAAG,aAAa,aAAa,IAAI,IAAM,KAAK,OAAS,iBAAiB,YAAY,MAAQ,EAAG,aAAa,SAAS,IAAI,GAAI,CAC5H,OAAO,UAAU,KAAK,QAAQ,CAClC,CACA,IAAK,EAAG,aAAa,QAAQ,IAAI,EAC7B,OAAO,KAAK,KAChB,MAAO,EACX,CATS,8BAUT,QAAQ,UAAY","names":["node"],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/domutils@3.1.0/node_modules/domutils/lib/stringify.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.innerText = exports.textContent = exports.getText = exports.getInnerHTML = exports.getOuterHTML = void 0;\nvar domhandler_1 = require(\"domhandler\");\nvar dom_serializer_1 = __importDefault(require(\"dom-serializer\"));\nvar domelementtype_1 = require(\"domelementtype\");\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the outer HTML of.\n * @param options Options for serialization.\n * @returns `node`'s outer HTML.\n */\nfunction getOuterHTML(node, options) {\n    return (0, dom_serializer_1.default)(node, options);\n}\nexports.getOuterHTML = getOuterHTML;\n/**\n * @category Stringify\n * @deprecated Use the `dom-serializer` module directly.\n * @param node Node to get the inner HTML of.\n * @param options Options for serialization.\n * @returns `node`'s inner HTML.\n */\nfunction getInnerHTML(node, options) {\n    return (0, domhandler_1.hasChildren)(node)\n        ? node.children.map(function (node) { return getOuterHTML(node, options); }).join(\"\")\n        : \"\";\n}\nexports.getInnerHTML = getInnerHTML;\n/**\n * Get a node's inner text. Same as `textContent`, but inserts newlines for `<br>` tags. Ignores comments.\n *\n * @category Stringify\n * @deprecated Use `textContent` instead.\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n */\nfunction getText(node) {\n    if (Array.isArray(node))\n        return node.map(getText).join(\"\");\n    if ((0, domhandler_1.isTag)(node))\n        return node.name === \"br\" ? \"\\n\" : getText(node.children);\n    if ((0, domhandler_1.isCDATA)(node))\n        return getText(node.children);\n    if ((0, domhandler_1.isText)(node))\n        return node.data;\n    return \"\";\n}\nexports.getText = getText;\n/**\n * Get a node's text content. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the text content of.\n * @returns `node`'s text content.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent}\n */\nfunction textContent(node) {\n    if (Array.isArray(node))\n        return node.map(textContent).join(\"\");\n    if ((0, domhandler_1.hasChildren)(node) && !(0, domhandler_1.isComment)(node)) {\n        return textContent(node.children);\n    }\n    if ((0, domhandler_1.isText)(node))\n        return node.data;\n    return \"\";\n}\nexports.textContent = textContent;\n/**\n * Get a node's inner text, ignoring `<script>` and `<style>` tags. Ignores comments.\n *\n * @category Stringify\n * @param node Node to get the inner text of.\n * @returns `node`'s inner text.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Node/innerText}\n */\nfunction innerText(node) {\n    if (Array.isArray(node))\n        return node.map(innerText).join(\"\");\n    if ((0, domhandler_1.hasChildren)(node) && (node.type === domelementtype_1.ElementType.Tag || (0, domhandler_1.isCDATA)(node))) {\n        return innerText(node.children);\n    }\n    if ((0, domhandler_1.isText)(node))\n        return node.data;\n    return \"\";\n}\nexports.innerText = innerText;\n//# sourceMappingURL=stringify.js.map"]}}