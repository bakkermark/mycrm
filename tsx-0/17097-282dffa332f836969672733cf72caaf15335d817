{"code":"(()=>{\nvar __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});module.exports=wrappy;function wrappy(fn,cb){if(fn&&cb)return wrappy(fn)(cb);if(typeof fn!==\"function\")throw new TypeError(\"need wrapper function\");Object.keys(fn).forEach(function(k){wrapper[k]=fn[k]});return wrapper;function wrapper(){var args=new Array(arguments.length);for(var i=0;i<args.length;i++){args[i]=arguments[i]}var ret=fn.apply(this,args);var cb2=args[args.length-1];if(typeof ret===\"function\"&&ret!==cb2){Object.keys(cb2).forEach(function(k){ret[k]=cb2[k]})}return ret}__name(wrapper,\"wrapper\")}__name(wrappy,\"wrappy\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";kHAKA,OAAO,QAAU,OACjB,SAAS,OAAQ,GAAI,GAAI,CACvB,GAAI,IAAM,GAAI,OAAO,OAAO,EAAE,EAAE,EAAE,EAElC,GAAI,OAAO,KAAO,WAChB,MAAM,IAAI,UAAU,uBAAuB,EAE7C,OAAO,KAAK,EAAE,EAAE,QAAQ,SAAU,EAAG,CACnC,QAAQ,CAAC,EAAI,GAAG,CAAC,CACnB,CAAC,EAED,OAAO,QAEP,SAAS,SAAU,CACjB,IAAI,KAAO,IAAI,MAAM,UAAU,MAAM,EACrC,QAAS,EAAI,EAAG,EAAI,KAAK,OAAQ,IAAK,CACpC,KAAK,CAAC,EAAI,UAAU,CAAC,CACvB,CACA,IAAI,IAAM,GAAG,MAAM,KAAM,IAAI,EAC7B,IAAIA,IAAK,KAAK,KAAK,OAAO,CAAC,EAC3B,GAAI,OAAO,MAAQ,YAAc,MAAQA,IAAI,CAC3C,OAAO,KAAKA,GAAE,EAAE,QAAQ,SAAU,EAAG,CACnC,IAAI,CAAC,EAAIA,IAAG,CAAC,CACf,CAAC,CACH,CACA,OAAO,GACT,CAbS,yBAcX,CA1BS","names":["cb"],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js"],"sourcesContent":["// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n"]}}