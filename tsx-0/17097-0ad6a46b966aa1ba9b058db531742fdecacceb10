{"code":"(()=>{\n\"use strict\";const{visit}=require(\"../lib/xast.js\");const{inheritableAttrs,pathElems}=require(\"./_collections.js\");exports.name=\"moveElemsAttrsToGroup\";exports.description=\"Move common attributes of group children to the group\";exports.fn=root=>{let deoptimizedWithStyles=false;visit(root,{element:{enter:node=>{if(node.name===\"style\"){deoptimizedWithStyles=true}}}});return{element:{exit:node=>{if(node.name!==\"g\"||node.children.length<=1){return}if(deoptimizedWithStyles){return}const commonAttributes=new Map;let initial=true;let everyChildIsPath=true;for(const child of node.children){if(child.type===\"element\"){if(pathElems.includes(child.name)===false){everyChildIsPath=false}if(initial){initial=false;for(const[name,value]of Object.entries(child.attributes)){if(inheritableAttrs.includes(name)){commonAttributes.set(name,value)}}}else{for(const[name,value]of commonAttributes){if(child.attributes[name]!==value){commonAttributes.delete(name)}}}}}if(node.attributes[\"clip-path\"]!=null||node.attributes.mask!=null){commonAttributes.delete(\"transform\")}if(everyChildIsPath){commonAttributes.delete(\"transform\")}for(const[name,value]of commonAttributes){if(name===\"transform\"){if(node.attributes.transform!=null){node.attributes.transform=`${node.attributes.transform} ${value}`}else{node.attributes.transform=value}}else{node.attributes[name]=value}}for(const child of node.children){if(child.type===\"element\"){for(const[name]of commonAttributes){delete child.attributes[name]}}}}}}};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aAEA,KAAM,CAAE,KAAM,EAAI,QAAQ,gBAAgB,EAC1C,KAAM,CAAE,iBAAkB,SAAU,EAAI,QAAQ,mBAAmB,EAEnE,QAAQ,KAAO,wBACf,QAAQ,YAAc,wDAwBtB,QAAQ,GAAM,MAAS,CAErB,IAAI,sBAAwB,MAC5B,MAAM,KAAM,CACV,QAAS,CACP,MAAQ,MAAS,CACf,GAAI,KAAK,OAAS,QAAS,CACzB,sBAAwB,IAC1B,CACF,CACF,CACF,CAAC,EAED,MAAO,CACL,QAAS,CACP,KAAO,MAAS,CAEd,GAAI,KAAK,OAAS,KAAO,KAAK,SAAS,QAAU,EAAG,CAClD,MACF,CAIA,GAAI,sBAAuB,CACzB,MACF,CAMA,MAAM,iBAAmB,IAAI,IAC7B,IAAI,QAAU,KACd,IAAI,iBAAmB,KACvB,UAAW,SAAS,KAAK,SAAU,CACjC,GAAI,MAAM,OAAS,UAAW,CAC5B,GAAI,UAAU,SAAS,MAAM,IAAI,IAAM,MAAO,CAC5C,iBAAmB,KACrB,CACA,GAAI,QAAS,CACX,QAAU,MAEV,SAAW,CAAC,KAAM,KAAK,IAAK,OAAO,QAAQ,MAAM,UAAU,EAAG,CAE5D,GAAI,iBAAiB,SAAS,IAAI,EAAG,CACnC,iBAAiB,IAAI,KAAM,KAAK,CAClC,CACF,CACF,KAAO,CAEL,SAAW,CAAC,KAAM,KAAK,IAAK,iBAAkB,CAC5C,GAAI,MAAM,WAAW,IAAI,IAAM,MAAO,CACpC,iBAAiB,OAAO,IAAI,CAC9B,CACF,CACF,CACF,CACF,CAGA,GACE,KAAK,WAAW,WAAW,GAAK,MAChC,KAAK,WAAW,MAAQ,KACxB,CACA,iBAAiB,OAAO,WAAW,CACrC,CAIA,GAAI,iBAAkB,CACpB,iBAAiB,OAAO,WAAW,CACrC,CAGA,SAAW,CAAC,KAAM,KAAK,IAAK,iBAAkB,CAC5C,GAAI,OAAS,YAAa,CACxB,GAAI,KAAK,WAAW,WAAa,KAAM,CACrC,KAAK,WAAW,UAAY,GAAG,KAAK,WAAW,SAAS,IAAI,KAAK,EACnE,KAAO,CACL,KAAK,WAAW,UAAY,KAC9B,CACF,KAAO,CACL,KAAK,WAAW,IAAI,EAAI,KAC1B,CACF,CAGA,UAAW,SAAS,KAAK,SAAU,CACjC,GAAI,MAAM,OAAS,UAAW,CAC5B,SAAW,CAAC,IAAI,IAAK,iBAAkB,CACrC,OAAO,MAAM,WAAW,IAAI,CAC9B,CACF,CACF,CACF,CACF,CACF,CACF","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/moveElemsAttrsToGroup.js"],"sourcesContent":["'use strict';\n\nconst { visit } = require('../lib/xast.js');\nconst { inheritableAttrs, pathElems } = require('./_collections.js');\n\nexports.name = 'moveElemsAttrsToGroup';\nexports.description = 'Move common attributes of group children to the group';\n\n/**\n * Move common attributes of group children to the group\n *\n * @example\n * <g attr1=\"val1\">\n *     <g attr2=\"val2\">\n *         text\n *     </g>\n *     <circle attr2=\"val2\" attr3=\"val3\"/>\n * </g>\n *              â¬‡\n * <g attr1=\"val1\" attr2=\"val2\">\n *     <g>\n *         text\n *     </g>\n *    <circle attr3=\"val3\"/>\n * </g>\n *\n * @author Kir Belevich\n *\n * @type {import('./plugins-types').Plugin<'moveElemsAttrsToGroup'>}\n */\nexports.fn = (root) => {\n  // find if any style element is present\n  let deoptimizedWithStyles = false;\n  visit(root, {\n    element: {\n      enter: (node) => {\n        if (node.name === 'style') {\n          deoptimizedWithStyles = true;\n        }\n      },\n    },\n  });\n\n  return {\n    element: {\n      exit: (node) => {\n        // process only groups with more than 1 children\n        if (node.name !== 'g' || node.children.length <= 1) {\n          return;\n        }\n\n        // deoptimize the plugin when style elements are present\n        // selectors may rely on id, classes or tag names\n        if (deoptimizedWithStyles) {\n          return;\n        }\n\n        /**\n         * find common attributes in group children\n         * @type {Map<string, string>}\n         */\n        const commonAttributes = new Map();\n        let initial = true;\n        let everyChildIsPath = true;\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            if (pathElems.includes(child.name) === false) {\n              everyChildIsPath = false;\n            }\n            if (initial) {\n              initial = false;\n              // collect all inheritable attributes from first child element\n              for (const [name, value] of Object.entries(child.attributes)) {\n                // consider only inheritable attributes\n                if (inheritableAttrs.includes(name)) {\n                  commonAttributes.set(name, value);\n                }\n              }\n            } else {\n              // exclude uncommon attributes from initial list\n              for (const [name, value] of commonAttributes) {\n                if (child.attributes[name] !== value) {\n                  commonAttributes.delete(name);\n                }\n              }\n            }\n          }\n        }\n\n        // preserve transform on children when group has clip-path or mask\n        if (\n          node.attributes['clip-path'] != null ||\n          node.attributes.mask != null\n        ) {\n          commonAttributes.delete('transform');\n        }\n\n        // preserve transform when all children are paths\n        // so the transform could be applied to path data by other plugins\n        if (everyChildIsPath) {\n          commonAttributes.delete('transform');\n        }\n\n        // add common children attributes to group\n        for (const [name, value] of commonAttributes) {\n          if (name === 'transform') {\n            if (node.attributes.transform != null) {\n              node.attributes.transform = `${node.attributes.transform} ${value}`;\n            } else {\n              node.attributes.transform = value;\n            }\n          } else {\n            node.attributes[name] = value;\n          }\n        }\n\n        // delete common attributes from children\n        for (const child of node.children) {\n          if (child.type === 'element') {\n            for (const [name] of commonAttributes) {\n              delete child.attributes[name];\n            }\n          }\n        }\n      },\n    },\n  };\n};\n"]}}