{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});Object.defineProperty(exports,\"__esModule\",{value:true});exports.parse=exports.isTraversal=void 0;var types_1=require(\"./types\");var reName=/^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;var reEscape=/\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;var actionTypes=new Map([[126,types_1.AttributeAction.Element],[94,types_1.AttributeAction.Start],[36,types_1.AttributeAction.End],[42,types_1.AttributeAction.Any],[33,types_1.AttributeAction.Not],[124,types_1.AttributeAction.Hyphen]]);var unpackPseudos=new Set([\"has\",\"not\",\"matches\",\"is\",\"where\",\"host\",\"host-context\"]);function isTraversal(selector){switch(selector.type){case types_1.SelectorType.Adjacent:case types_1.SelectorType.Child:case types_1.SelectorType.Descendant:case types_1.SelectorType.Parent:case types_1.SelectorType.Sibling:case types_1.SelectorType.ColumnCombinator:return true;default:return false}}__name(isTraversal,\"isTraversal\");exports.isTraversal=isTraversal;var stripQuotesFromPseudos=new Set([\"contains\",\"icontains\"]);function funescape(_,escaped,escapedWhitespace){var high=parseInt(escaped,16)-65536;return high!==high||escapedWhitespace?escaped:high<0?String.fromCharCode(high+65536):String.fromCharCode(high>>10|55296,high&1023|56320)}__name(funescape,\"funescape\");function unescapeCSS(str){return str.replace(reEscape,funescape)}__name(unescapeCSS,\"unescapeCSS\");function isQuote(c){return c===39||c===34}__name(isQuote,\"isQuote\");function isWhitespace(c){return c===32||c===9||c===10||c===12||c===13}__name(isWhitespace,\"isWhitespace\");function parse(selector){var subselects=[];var endIndex=parseSelector(subselects,\"\".concat(selector),0);if(endIndex<selector.length){throw new Error(\"Unmatched selector: \".concat(selector.slice(endIndex)))}return subselects}__name(parse,\"parse\");exports.parse=parse;function parseSelector(subselects,selector,selectorIndex){var tokens=[];function getName(offset){var match=selector.slice(selectorIndex+offset).match(reName);if(!match){throw new Error(\"Expected name, found \".concat(selector.slice(selectorIndex)))}var name=match[0];selectorIndex+=offset+name.length;return unescapeCSS(name)}__name(getName,\"getName\");function stripWhitespace(offset){selectorIndex+=offset;while(selectorIndex<selector.length&&isWhitespace(selector.charCodeAt(selectorIndex))){selectorIndex++}}__name(stripWhitespace,\"stripWhitespace\");function readValueWithParenthesis(){selectorIndex+=1;var start=selectorIndex;var counter=1;for(;counter>0&&selectorIndex<selector.length;selectorIndex++){if(selector.charCodeAt(selectorIndex)===40&&!isEscaped(selectorIndex)){counter++}else if(selector.charCodeAt(selectorIndex)===41&&!isEscaped(selectorIndex)){counter--}}if(counter){throw new Error(\"Parenthesis not matched\")}return unescapeCSS(selector.slice(start,selectorIndex-1))}__name(readValueWithParenthesis,\"readValueWithParenthesis\");function isEscaped(pos){var slashCount=0;while(selector.charCodeAt(--pos)===92)slashCount++;return(slashCount&1)===1}__name(isEscaped,\"isEscaped\");function ensureNotTraversal(){if(tokens.length>0&&isTraversal(tokens[tokens.length-1])){throw new Error(\"Did not expect successive traversals.\")}}__name(ensureNotTraversal,\"ensureNotTraversal\");function addTraversal(type){if(tokens.length>0&&tokens[tokens.length-1].type===types_1.SelectorType.Descendant){tokens[tokens.length-1].type=type;return}ensureNotTraversal();tokens.push({type})}__name(addTraversal,\"addTraversal\");function addSpecialAttribute(name,action2){tokens.push({type:types_1.SelectorType.Attribute,name,action:action2,value:getName(1),namespace:null,ignoreCase:\"quirks\"})}__name(addSpecialAttribute,\"addSpecialAttribute\");function finalizeSubselector(){if(tokens.length&&tokens[tokens.length-1].type===types_1.SelectorType.Descendant){tokens.pop()}if(tokens.length===0){throw new Error(\"Empty sub-selector\")}subselects.push(tokens)}__name(finalizeSubselector,\"finalizeSubselector\");stripWhitespace(0);if(selector.length===selectorIndex){return selectorIndex}loop:while(selectorIndex<selector.length){var firstChar=selector.charCodeAt(selectorIndex);switch(firstChar){case 32:case 9:case 10:case 12:case 13:{if(tokens.length===0||tokens[0].type!==types_1.SelectorType.Descendant){ensureNotTraversal();tokens.push({type:types_1.SelectorType.Descendant})}stripWhitespace(1);break}case 62:{addTraversal(types_1.SelectorType.Child);stripWhitespace(1);break}case 60:{addTraversal(types_1.SelectorType.Parent);stripWhitespace(1);break}case 126:{addTraversal(types_1.SelectorType.Sibling);stripWhitespace(1);break}case 43:{addTraversal(types_1.SelectorType.Adjacent);stripWhitespace(1);break}case 46:{addSpecialAttribute(\"class\",types_1.AttributeAction.Element);break}case 35:{addSpecialAttribute(\"id\",types_1.AttributeAction.Equals);break}case 91:{stripWhitespace(1);var name_1=void 0;var namespace=null;if(selector.charCodeAt(selectorIndex)===124){name_1=getName(1)}else if(selector.startsWith(\"*|\",selectorIndex)){namespace=\"*\";name_1=getName(2)}else{name_1=getName(0);if(selector.charCodeAt(selectorIndex)===124&&selector.charCodeAt(selectorIndex+1)!==61){namespace=name_1;name_1=getName(1)}}stripWhitespace(0);var action=types_1.AttributeAction.Exists;var possibleAction=actionTypes.get(selector.charCodeAt(selectorIndex));if(possibleAction){action=possibleAction;if(selector.charCodeAt(selectorIndex+1)!==61){throw new Error(\"Expected `=`\")}stripWhitespace(2)}else if(selector.charCodeAt(selectorIndex)===61){action=types_1.AttributeAction.Equals;stripWhitespace(1)}var value=\"\";var ignoreCase=null;if(action!==\"exists\"){if(isQuote(selector.charCodeAt(selectorIndex))){var quote=selector.charCodeAt(selectorIndex);var sectionEnd=selectorIndex+1;while(sectionEnd<selector.length&&(selector.charCodeAt(sectionEnd)!==quote||isEscaped(sectionEnd))){sectionEnd+=1}if(selector.charCodeAt(sectionEnd)!==quote){throw new Error(\"Attribute value didn't end\")}value=unescapeCSS(selector.slice(selectorIndex+1,sectionEnd));selectorIndex=sectionEnd+1}else{var valueStart=selectorIndex;while(selectorIndex<selector.length&&(!isWhitespace(selector.charCodeAt(selectorIndex))&&selector.charCodeAt(selectorIndex)!==93||isEscaped(selectorIndex))){selectorIndex+=1}value=unescapeCSS(selector.slice(valueStart,selectorIndex))}stripWhitespace(0);var forceIgnore=selector.charCodeAt(selectorIndex)|32;if(forceIgnore===115){ignoreCase=false;stripWhitespace(1)}else if(forceIgnore===105){ignoreCase=true;stripWhitespace(1)}}if(selector.charCodeAt(selectorIndex)!==93){throw new Error(\"Attribute selector didn't terminate\")}selectorIndex+=1;var attributeSelector={type:types_1.SelectorType.Attribute,name:name_1,action,value,namespace,ignoreCase};tokens.push(attributeSelector);break}case 58:{if(selector.charCodeAt(selectorIndex+1)===58){tokens.push({type:types_1.SelectorType.PseudoElement,name:getName(2).toLowerCase(),data:selector.charCodeAt(selectorIndex)===40?readValueWithParenthesis():null});continue}var name_2=getName(1).toLowerCase();var data=null;if(selector.charCodeAt(selectorIndex)===40){if(unpackPseudos.has(name_2)){if(isQuote(selector.charCodeAt(selectorIndex+1))){throw new Error(\"Pseudo-selector \".concat(name_2,\" cannot be quoted\"))}data=[];selectorIndex=parseSelector(data,selector,selectorIndex+1);if(selector.charCodeAt(selectorIndex)!==41){throw new Error(\"Missing closing parenthesis in :\".concat(name_2,\" (\").concat(selector,\")\"))}selectorIndex+=1}else{data=readValueWithParenthesis();if(stripQuotesFromPseudos.has(name_2)){var quot=data.charCodeAt(0);if(quot===data.charCodeAt(data.length-1)&&isQuote(quot)){data=data.slice(1,-1)}}data=unescapeCSS(data)}}tokens.push({type:types_1.SelectorType.Pseudo,name:name_2,data});break}case 44:{finalizeSubselector();tokens=[];stripWhitespace(1);break}default:{if(selector.startsWith(\"/*\",selectorIndex)){var endIndex=selector.indexOf(\"*/\",selectorIndex+2);if(endIndex<0){throw new Error(\"Comment was not terminated\")}selectorIndex=endIndex+2;if(tokens.length===0){stripWhitespace(0)}break}var namespace=null;var name_3=void 0;if(firstChar===42){selectorIndex+=1;name_3=\"*\"}else if(firstChar===124){name_3=\"\";if(selector.charCodeAt(selectorIndex+1)===124){addTraversal(types_1.SelectorType.ColumnCombinator);stripWhitespace(2);break}}else if(reName.test(selector.slice(selectorIndex))){name_3=getName(0)}else{break loop}if(selector.charCodeAt(selectorIndex)===124&&selector.charCodeAt(selectorIndex+1)!==124){namespace=name_3;if(selector.charCodeAt(selectorIndex+1)===42){name_3=\"*\";selectorIndex+=2}else{name_3=getName(1)}}tokens.push(name_3===\"*\"?{type:types_1.SelectorType.Universal,namespace}:{type:types_1.SelectorType.Tag,name:name_3,namespace})}}}finalizeSubselector();return selectorIndex}__name(parseSelector,\"parseSelector\");\n})()\n","warnings":[],"map":{"version":3,"mappings":"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","names":["action"],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/css-what@6.1.0/node_modules/css-what/lib/commonjs/parse.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parse = exports.isTraversal = void 0;\nvar types_1 = require(\"./types\");\nvar reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nvar reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nvar actionTypes = new Map([\n    [126 /* Tilde */, types_1.AttributeAction.Element],\n    [94 /* Circumflex */, types_1.AttributeAction.Start],\n    [36 /* Dollar */, types_1.AttributeAction.End],\n    [42 /* Asterisk */, types_1.AttributeAction.Any],\n    [33 /* ExclamationMark */, types_1.AttributeAction.Not],\n    [124 /* Pipe */, types_1.AttributeAction.Hyphen],\n]);\n// Pseudos, whose data property is parsed as well.\nvar unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nfunction isTraversal(selector) {\n    switch (selector.type) {\n        case types_1.SelectorType.Adjacent:\n        case types_1.SelectorType.Child:\n        case types_1.SelectorType.Descendant:\n        case types_1.SelectorType.Parent:\n        case types_1.SelectorType.Sibling:\n        case types_1.SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nexports.isTraversal = isTraversal;\nvar stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    var high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 9 /* Tab */ ||\n        c === 10 /* NewLine */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nfunction parse(selector) {\n    var subselects = [];\n    var endIndex = parseSelector(subselects, \"\".concat(selector), 0);\n    if (endIndex < selector.length) {\n        throw new Error(\"Unmatched selector: \".concat(selector.slice(endIndex)));\n    }\n    return subselects;\n}\nexports.parse = parse;\nfunction parseSelector(subselects, selector, selectorIndex) {\n    var tokens = [];\n    function getName(offset) {\n        var match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(\"Expected name, found \".concat(selector.slice(selectorIndex)));\n        }\n        var name = match[0];\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while (selectorIndex < selector.length &&\n            isWhitespace(selector.charCodeAt(selectorIndex))) {\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        var start = selectorIndex;\n        var counter = 1;\n        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n            if (selector.charCodeAt(selectorIndex) ===\n                40 /* LeftParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter++;\n            }\n            else if (selector.charCodeAt(selectorIndex) ===\n                41 /* RightParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        var slashCount = 0;\n        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 &&\n            tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({ type: type });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: types_1.SelectorType.Attribute,\n            name: name,\n            action: action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\",\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */\n    function finalizeSubselector() {\n        if (tokens.length &&\n            tokens[tokens.length - 1].type === types_1.SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while (selectorIndex < selector.length) {\n        var firstChar = selector.charCodeAt(selectorIndex);\n        switch (firstChar) {\n            // Whitespace\n            case 32 /* Space */:\n            case 9 /* Tab */:\n            case 10 /* NewLine */:\n            case 12 /* FormFeed */:\n            case 13 /* CarriageReturn */: {\n                if (tokens.length === 0 ||\n                    tokens[0].type !== types_1.SelectorType.Descendant) {\n                    ensureNotTraversal();\n                    tokens.push({ type: types_1.SelectorType.Descendant });\n                }\n                stripWhitespace(1);\n                break;\n            }\n            // Traversals\n            case 62 /* GreaterThan */: {\n                addTraversal(types_1.SelectorType.Child);\n                stripWhitespace(1);\n                break;\n            }\n            case 60 /* LessThan */: {\n                addTraversal(types_1.SelectorType.Parent);\n                stripWhitespace(1);\n                break;\n            }\n            case 126 /* Tilde */: {\n                addTraversal(types_1.SelectorType.Sibling);\n                stripWhitespace(1);\n                break;\n            }\n            case 43 /* Plus */: {\n                addTraversal(types_1.SelectorType.Adjacent);\n                stripWhitespace(1);\n                break;\n            }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */: {\n                addSpecialAttribute(\"class\", types_1.AttributeAction.Element);\n                break;\n            }\n            case 35 /* Hash */: {\n                addSpecialAttribute(\"id\", types_1.AttributeAction.Equals);\n                break;\n            }\n            case 91 /* LeftSquareBracket */: {\n                stripWhitespace(1);\n                // Determine attribute name and namespace\n                var name_1 = void 0;\n                var namespace = null;\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n                    // Equivalent to no namespace\n                    name_1 = getName(1);\n                }\n                else if (selector.startsWith(\"*|\", selectorIndex)) {\n                    namespace = \"*\";\n                    name_1 = getName(2);\n                }\n                else {\n                    name_1 = getName(0);\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                        selector.charCodeAt(selectorIndex + 1) !==\n                            61 /* Equal */) {\n                        namespace = name_1;\n                        name_1 = getName(1);\n                    }\n                }\n                stripWhitespace(0);\n                // Determine comparison operation\n                var action = types_1.AttributeAction.Exists;\n                var possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                if (possibleAction) {\n                    action = possibleAction;\n                    if (selector.charCodeAt(selectorIndex + 1) !==\n                        61 /* Equal */) {\n                        throw new Error(\"Expected `=`\");\n                    }\n                    stripWhitespace(2);\n                }\n                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n                    action = types_1.AttributeAction.Equals;\n                    stripWhitespace(1);\n                }\n                // Determine value\n                var value = \"\";\n                var ignoreCase = null;\n                if (action !== \"exists\") {\n                    if (isQuote(selector.charCodeAt(selectorIndex))) {\n                        var quote = selector.charCodeAt(selectorIndex);\n                        var sectionEnd = selectorIndex + 1;\n                        while (sectionEnd < selector.length &&\n                            (selector.charCodeAt(sectionEnd) !== quote ||\n                                isEscaped(sectionEnd))) {\n                            sectionEnd += 1;\n                        }\n                        if (selector.charCodeAt(sectionEnd) !== quote) {\n                            throw new Error(\"Attribute value didn't end\");\n                        }\n                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                        selectorIndex = sectionEnd + 1;\n                    }\n                    else {\n                        var valueStart = selectorIndex;\n                        while (selectorIndex < selector.length &&\n                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&\n                                selector.charCodeAt(selectorIndex) !==\n                                    93 /* RightSquareBracket */) ||\n                                isEscaped(selectorIndex))) {\n                            selectorIndex += 1;\n                        }\n                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                    }\n                    stripWhitespace(0);\n                    // See if we have a force ignore flag\n                    var forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                    // If the forceIgnore flag is set (either `i` or `s`), use that value\n                    if (forceIgnore === 115 /* LowerS */) {\n                        ignoreCase = false;\n                        stripWhitespace(1);\n                    }\n                    else if (forceIgnore === 105 /* LowerI */) {\n                        ignoreCase = true;\n                        stripWhitespace(1);\n                    }\n                }\n                if (selector.charCodeAt(selectorIndex) !==\n                    93 /* RightSquareBracket */) {\n                    throw new Error(\"Attribute selector didn't terminate\");\n                }\n                selectorIndex += 1;\n                var attributeSelector = {\n                    type: types_1.SelectorType.Attribute,\n                    name: name_1,\n                    action: action,\n                    value: value,\n                    namespace: namespace,\n                    ignoreCase: ignoreCase,\n                };\n                tokens.push(attributeSelector);\n                break;\n            }\n            case 58 /* Colon */: {\n                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n                    tokens.push({\n                        type: types_1.SelectorType.PseudoElement,\n                        name: getName(2).toLowerCase(),\n                        data: selector.charCodeAt(selectorIndex) ===\n                            40 /* LeftParenthesis */\n                            ? readValueWithParenthesis()\n                            : null,\n                    });\n                    continue;\n                }\n                var name_2 = getName(1).toLowerCase();\n                var data = null;\n                if (selector.charCodeAt(selectorIndex) ===\n                    40 /* LeftParenthesis */) {\n                    if (unpackPseudos.has(name_2)) {\n                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                            throw new Error(\"Pseudo-selector \".concat(name_2, \" cannot be quoted\"));\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                        if (selector.charCodeAt(selectorIndex) !==\n                            41 /* RightParenthesis */) {\n                            throw new Error(\"Missing closing parenthesis in :\".concat(name_2, \" (\").concat(selector, \")\"));\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        data = readValueWithParenthesis();\n                        if (stripQuotesFromPseudos.has(name_2)) {\n                            var quot = data.charCodeAt(0);\n                            if (quot === data.charCodeAt(data.length - 1) &&\n                                isQuote(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                        }\n                        data = unescapeCSS(data);\n                    }\n                }\n                tokens.push({ type: types_1.SelectorType.Pseudo, name: name_2, data: data });\n                break;\n            }\n            case 44 /* Comma */: {\n                finalizeSubselector();\n                tokens = [];\n                stripWhitespace(1);\n                break;\n            }\n            default: {\n                if (selector.startsWith(\"/*\", selectorIndex)) {\n                    var endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                    if (endIndex < 0) {\n                        throw new Error(\"Comment was not terminated\");\n                    }\n                    selectorIndex = endIndex + 2;\n                    // Remove leading whitespace\n                    if (tokens.length === 0) {\n                        stripWhitespace(0);\n                    }\n                    break;\n                }\n                var namespace = null;\n                var name_3 = void 0;\n                if (firstChar === 42 /* Asterisk */) {\n                    selectorIndex += 1;\n                    name_3 = \"*\";\n                }\n                else if (firstChar === 124 /* Pipe */) {\n                    name_3 = \"\";\n                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n                        addTraversal(types_1.SelectorType.ColumnCombinator);\n                        stripWhitespace(2);\n                        break;\n                    }\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name_3 = getName(0);\n                }\n                else {\n                    break loop;\n                }\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n                    namespace = name_3;\n                    if (selector.charCodeAt(selectorIndex + 1) ===\n                        42 /* Asterisk */) {\n                        name_3 = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name_3 = getName(1);\n                    }\n                }\n                tokens.push(name_3 === \"*\"\n                    ? { type: types_1.SelectorType.Universal, namespace: namespace }\n                    : { type: types_1.SelectorType.Tag, name: name_3, namespace: namespace });\n            }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n"]}}