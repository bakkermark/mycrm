{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const{detachNodeFromParent}=require(\"../lib/xast.js\");const{elemsGroups}=require(\"./_collections.js\");exports.name=\"removeUselessDefs\";exports.description=\"removes elements in <defs> without id\";exports.fn=()=>{return{element:{enter:(node,parentNode)=>{if(node.name===\"defs\"){const usefulNodes=[];collectUsefulNodes(node,usefulNodes);if(usefulNodes.length===0){detachNodeFromParent(node,parentNode)}for(const usefulNode of usefulNodes){Object.defineProperty(usefulNode,\"parentNode\",{writable:true,value:node})}node.children=usefulNodes}else if(elemsGroups.nonRendering.includes(node.name)&&node.attributes.id==null){detachNodeFromParent(node,parentNode)}}}}};const collectUsefulNodes=__name((node,usefulNodes)=>{for(const child of node.children){if(child.type===\"element\"){if(child.attributes.id!=null||child.name===\"style\"){usefulNodes.push(child)}else{collectUsefulNodes(child,usefulNodes)}}}},\"collectUsefulNodes\");\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAMA,KAAM,CAAE,oBAAqB,EAAI,QAAQ,gBAAgB,EACzD,KAAM,CAAE,WAAY,EAAI,QAAQ,mBAAmB,EAEnD,QAAQ,KAAO,oBACf,QAAQ,YAAc,wCAStB,QAAQ,GAAK,IAAM,CACjB,MAAO,CACL,QAAS,CACP,MAAO,CAAC,KAAM,aAAe,CAC3B,GAAI,KAAK,OAAS,OAAQ,CAIxB,MAAM,YAAc,CAAC,EACrB,mBAAmB,KAAM,WAAW,EACpC,GAAI,YAAY,SAAW,EAAG,CAC5B,qBAAqB,KAAM,UAAU,CACvC,CAEA,UAAW,cAAc,YAAa,CACpC,OAAO,eAAe,WAAY,aAAc,CAC9C,SAAU,KACV,MAAO,IACT,CAAC,CACH,CACA,KAAK,SAAW,WAClB,SACE,YAAY,aAAa,SAAS,KAAK,IAAI,GAC3C,KAAK,WAAW,IAAM,KACtB,CACA,qBAAqB,KAAM,UAAU,CACvC,CACF,CACF,CACF,CACF,EAKA,MAAM,mBAAqB,QAAC,KAAM,cAAgB,CAChD,UAAW,SAAS,KAAK,SAAU,CACjC,GAAI,MAAM,OAAS,UAAW,CAC5B,GAAI,MAAM,WAAW,IAAM,MAAQ,MAAM,OAAS,QAAS,CACzD,YAAY,KAAK,KAAK,CACxB,KAAO,CACL,mBAAmB,MAAO,WAAW,CACvC,CACF,CACF,CACF,EAV2B","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/svgo@3.0.3/node_modules/svgo/plugins/removeUselessDefs.js"],"sourcesContent":["'use strict';\n\n/**\n * @typedef {import('../lib/types').XastElement} XastElement\n */\n\nconst { detachNodeFromParent } = require('../lib/xast.js');\nconst { elemsGroups } = require('./_collections.js');\n\nexports.name = 'removeUselessDefs';\nexports.description = 'removes elements in <defs> without id';\n\n/**\n * Removes content of defs and properties that aren't rendered directly without ids.\n *\n * @author Lev Solntsev\n *\n * @type {import('./plugins-types').Plugin<'removeUselessDefs'>}\n */\nexports.fn = () => {\n  return {\n    element: {\n      enter: (node, parentNode) => {\n        if (node.name === 'defs') {\n          /**\n           * @type {Array<XastElement>}\n           */\n          const usefulNodes = [];\n          collectUsefulNodes(node, usefulNodes);\n          if (usefulNodes.length === 0) {\n            detachNodeFromParent(node, parentNode);\n          }\n          // TODO remove legacy parentNode in v4\n          for (const usefulNode of usefulNodes) {\n            Object.defineProperty(usefulNode, 'parentNode', {\n              writable: true,\n              value: node,\n            });\n          }\n          node.children = usefulNodes;\n        } else if (\n          elemsGroups.nonRendering.includes(node.name) &&\n          node.attributes.id == null\n        ) {\n          detachNodeFromParent(node, parentNode);\n        }\n      },\n    },\n  };\n};\n\n/**\n * @type {(node: XastElement, usefulNodes: Array<XastElement>) => void}\n */\nconst collectUsefulNodes = (node, usefulNodes) => {\n  for (const child of node.children) {\n    if (child.type === 'element') {\n      if (child.attributes.id != null || child.name === 'style') {\n        usefulNodes.push(child);\n      } else {\n        collectUsefulNodes(child, usefulNodes);\n      }\n    }\n  }\n};\n"]}}