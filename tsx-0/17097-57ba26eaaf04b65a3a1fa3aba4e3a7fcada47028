{"code":"(()=>{\n\"use strict\";const{PassThrough:PassThroughStream}=require(\"stream\");module.exports=options=>{options={...options};const{array}=options;let{encoding}=options;const isBuffer=encoding===\"buffer\";let objectMode=false;if(array){objectMode=!(encoding||isBuffer)}else{encoding=encoding||\"utf8\"}if(isBuffer){encoding=null}const stream=new PassThroughStream({objectMode});if(encoding){stream.setEncoding(encoding)}let length=0;const chunks=[];stream.on(\"data\",chunk=>{chunks.push(chunk);if(objectMode){length=chunks.length}else{length+=chunk.length}});stream.getBufferedValue=()=>{if(array){return chunks}return isBuffer?Buffer.concat(chunks,length):chunks.join(\"\")};stream.getBufferedLength=()=>length;return stream};\n})()\n","warnings":[],"map":{"version":3,"mappings":";aACA,KAAM,CAAC,YAAa,iBAAiB,EAAI,QAAQ,QAAQ,EAEzD,OAAO,QAAU,SAAW,CAC3B,QAAU,CAAC,GAAG,OAAO,EAErB,KAAM,CAAC,KAAK,EAAI,QAChB,GAAI,CAAC,QAAQ,EAAI,QACjB,MAAM,SAAW,WAAa,SAC9B,IAAI,WAAa,MAEjB,GAAI,MAAO,CACV,WAAa,EAAE,UAAY,SAC5B,KAAO,CACN,SAAW,UAAY,MACxB,CAEA,GAAI,SAAU,CACb,SAAW,IACZ,CAEA,MAAM,OAAS,IAAI,kBAAkB,CAAC,UAAU,CAAC,EAEjD,GAAI,SAAU,CACb,OAAO,YAAY,QAAQ,CAC5B,CAEA,IAAI,OAAS,EACb,MAAM,OAAS,CAAC,EAEhB,OAAO,GAAG,OAAQ,OAAS,CAC1B,OAAO,KAAK,KAAK,EAEjB,GAAI,WAAY,CACf,OAAS,OAAO,MACjB,KAAO,CACN,QAAU,MAAM,MACjB,CACD,CAAC,EAED,OAAO,iBAAmB,IAAM,CAC/B,GAAI,MAAO,CACV,OAAO,MACR,CAEA,OAAO,SAAW,OAAO,OAAO,OAAQ,MAAM,EAAI,OAAO,KAAK,EAAE,CACjE,EAEA,OAAO,kBAAoB,IAAM,OAEjC,OAAO,MACR","names":[],"sources":["/Users/markbakker/RiderProjects/mycrm/node_modules/.pnpm/get-stream@5.2.0/node_modules/get-stream/buffer-stream.js"],"sourcesContent":["'use strict';\nconst {PassThrough: PassThroughStream} = require('stream');\n\nmodule.exports = options => {\n\toptions = {...options};\n\n\tconst {array} = options;\n\tlet {encoding} = options;\n\tconst isBuffer = encoding === 'buffer';\n\tlet objectMode = false;\n\n\tif (array) {\n\t\tobjectMode = !(encoding || isBuffer);\n\t} else {\n\t\tencoding = encoding || 'utf8';\n\t}\n\n\tif (isBuffer) {\n\t\tencoding = null;\n\t}\n\n\tconst stream = new PassThroughStream({objectMode});\n\n\tif (encoding) {\n\t\tstream.setEncoding(encoding);\n\t}\n\n\tlet length = 0;\n\tconst chunks = [];\n\n\tstream.on('data', chunk => {\n\t\tchunks.push(chunk);\n\n\t\tif (objectMode) {\n\t\t\tlength = chunks.length;\n\t\t} else {\n\t\t\tlength += chunk.length;\n\t\t}\n\t});\n\n\tstream.getBufferedValue = () => {\n\t\tif (array) {\n\t\t\treturn chunks;\n\t\t}\n\n\t\treturn isBuffer ? Buffer.concat(chunks, length) : chunks.join('');\n\t};\n\n\tstream.getBufferedLength = () => length;\n\n\treturn stream;\n};\n"]}}